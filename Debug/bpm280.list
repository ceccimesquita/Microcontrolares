
bpm280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c84  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08001d90  08001d90  00002d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f64  08001f64  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001f64  08001f64  00002f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f6c  08001f6c  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f6c  08001f6c  00002f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f70  08001f70  00002f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001f74  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000054  08001fc8  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08001fc8  000031dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018ea  00000000  00000000  0000307d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a10  00000000  00000000  00004967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b0  00000000  00000000  00005378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001e0  00000000  00000000  00005628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a1e  00000000  00000000  00005808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e1f  00000000  00000000  0001c226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f10f  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009f154  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000de8  00000000  00000000  0009f198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0009ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d78 	.word	0x08001d78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08001d78 	.word	0x08001d78

0800014c <__aeabi_ldivmod>:
 800014c:	b97b      	cbnz	r3, 800016e <__aeabi_ldivmod+0x22>
 800014e:	b972      	cbnz	r2, 800016e <__aeabi_ldivmod+0x22>
 8000150:	2900      	cmp	r1, #0
 8000152:	bfbe      	ittt	lt
 8000154:	2000      	movlt	r0, #0
 8000156:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800015a:	e006      	blt.n	800016a <__aeabi_ldivmod+0x1e>
 800015c:	bf08      	it	eq
 800015e:	2800      	cmpeq	r0, #0
 8000160:	bf1c      	itt	ne
 8000162:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000166:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800016a:	f000 b99b 	b.w	80004a4 <__aeabi_idiv0>
 800016e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000172:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000176:	2900      	cmp	r1, #0
 8000178:	db09      	blt.n	800018e <__aeabi_ldivmod+0x42>
 800017a:	2b00      	cmp	r3, #0
 800017c:	db1a      	blt.n	80001b4 <__aeabi_ldivmod+0x68>
 800017e:	f000 f835 	bl	80001ec <__udivmoddi4>
 8000182:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018a:	b004      	add	sp, #16
 800018c:	4770      	bx	lr
 800018e:	4240      	negs	r0, r0
 8000190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000194:	2b00      	cmp	r3, #0
 8000196:	db1b      	blt.n	80001d0 <__aeabi_ldivmod+0x84>
 8000198:	f000 f828 	bl	80001ec <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4240      	negs	r0, r0
 80001a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ac:	4252      	negs	r2, r2
 80001ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001b2:	4770      	bx	lr
 80001b4:	4252      	negs	r2, r2
 80001b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ba:	f000 f817 	bl	80001ec <__udivmoddi4>
 80001be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c6:	b004      	add	sp, #16
 80001c8:	4240      	negs	r0, r0
 80001ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ce:	4770      	bx	lr
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	f000 f809 	bl	80001ec <__udivmoddi4>
 80001da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e2:	b004      	add	sp, #16
 80001e4:	4252      	negs	r2, r2
 80001e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ea:	4770      	bx	lr

080001ec <__udivmoddi4>:
 80001ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f0:	9d08      	ldr	r5, [sp, #32]
 80001f2:	460c      	mov	r4, r1
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d14e      	bne.n	8000296 <__udivmoddi4+0xaa>
 80001f8:	4694      	mov	ip, r2
 80001fa:	458c      	cmp	ip, r1
 80001fc:	4686      	mov	lr, r0
 80001fe:	fab2 f282 	clz	r2, r2
 8000202:	d962      	bls.n	80002ca <__udivmoddi4+0xde>
 8000204:	b14a      	cbz	r2, 800021a <__udivmoddi4+0x2e>
 8000206:	f1c2 0320 	rsb	r3, r2, #32
 800020a:	4091      	lsls	r1, r2
 800020c:	fa20 f303 	lsr.w	r3, r0, r3
 8000210:	fa0c fc02 	lsl.w	ip, ip, r2
 8000214:	4319      	orrs	r1, r3
 8000216:	fa00 fe02 	lsl.w	lr, r0, r2
 800021a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800021e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000222:	fb07 1114 	mls	r1, r7, r4, r1
 8000226:	fa1f f68c 	uxth.w	r6, ip
 800022a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800022e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000232:	fb04 f106 	mul.w	r1, r4, r6
 8000236:	4299      	cmp	r1, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x64>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000242:	f080 8110 	bcs.w	8000466 <__udivmoddi4+0x27a>
 8000246:	4299      	cmp	r1, r3
 8000248:	f240 810d 	bls.w	8000466 <__udivmoddi4+0x27a>
 800024c:	3c02      	subs	r4, #2
 800024e:	4463      	add	r3, ip
 8000250:	1a59      	subs	r1, r3, r1
 8000252:	fbb1 f0f7 	udiv	r0, r1, r7
 8000256:	fb07 1110 	mls	r1, r7, r0, r1
 800025a:	fb00 f606 	mul.w	r6, r0, r6
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	429e      	cmp	r6, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x94>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000272:	f080 80fa 	bcs.w	800046a <__udivmoddi4+0x27e>
 8000276:	429e      	cmp	r6, r3
 8000278:	f240 80f7 	bls.w	800046a <__udivmoddi4+0x27e>
 800027c:	4463      	add	r3, ip
 800027e:	3802      	subs	r0, #2
 8000280:	2100      	movs	r1, #0
 8000282:	1b9b      	subs	r3, r3, r6
 8000284:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000288:	b11d      	cbz	r5, 8000292 <__udivmoddi4+0xa6>
 800028a:	40d3      	lsrs	r3, r2
 800028c:	2200      	movs	r2, #0
 800028e:	e9c5 3200 	strd	r3, r2, [r5]
 8000292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000296:	428b      	cmp	r3, r1
 8000298:	d905      	bls.n	80002a6 <__udivmoddi4+0xba>
 800029a:	b10d      	cbz	r5, 80002a0 <__udivmoddi4+0xb4>
 800029c:	e9c5 0100 	strd	r0, r1, [r5]
 80002a0:	2100      	movs	r1, #0
 80002a2:	4608      	mov	r0, r1
 80002a4:	e7f5      	b.n	8000292 <__udivmoddi4+0xa6>
 80002a6:	fab3 f183 	clz	r1, r3
 80002aa:	2900      	cmp	r1, #0
 80002ac:	d146      	bne.n	800033c <__udivmoddi4+0x150>
 80002ae:	42a3      	cmp	r3, r4
 80002b0:	d302      	bcc.n	80002b8 <__udivmoddi4+0xcc>
 80002b2:	4290      	cmp	r0, r2
 80002b4:	f0c0 80ee 	bcc.w	8000494 <__udivmoddi4+0x2a8>
 80002b8:	1a86      	subs	r6, r0, r2
 80002ba:	eb64 0303 	sbc.w	r3, r4, r3
 80002be:	2001      	movs	r0, #1
 80002c0:	2d00      	cmp	r5, #0
 80002c2:	d0e6      	beq.n	8000292 <__udivmoddi4+0xa6>
 80002c4:	e9c5 6300 	strd	r6, r3, [r5]
 80002c8:	e7e3      	b.n	8000292 <__udivmoddi4+0xa6>
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	f040 808f 	bne.w	80003ee <__udivmoddi4+0x202>
 80002d0:	eba1 040c 	sub.w	r4, r1, ip
 80002d4:	2101      	movs	r1, #1
 80002d6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fbb4 f6f8 	udiv	r6, r4, r8
 80002e2:	fb08 4416 	mls	r4, r8, r6, r4
 80002e6:	fb07 f006 	mul.w	r0, r7, r6
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002f2:	4298      	cmp	r0, r3
 80002f4:	d908      	bls.n	8000308 <__udivmoddi4+0x11c>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x11a>
 8000300:	4298      	cmp	r0, r3
 8000302:	f200 80cb 	bhi.w	800049c <__udivmoddi4+0x2b0>
 8000306:	4626      	mov	r6, r4
 8000308:	1a1c      	subs	r4, r3, r0
 800030a:	fbb4 f0f8 	udiv	r0, r4, r8
 800030e:	fb08 4410 	mls	r4, r8, r0, r4
 8000312:	fb00 f707 	mul.w	r7, r0, r7
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	429f      	cmp	r7, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x148>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x146>
 800032c:	429f      	cmp	r7, r3
 800032e:	f200 80ae 	bhi.w	800048e <__udivmoddi4+0x2a2>
 8000332:	4620      	mov	r0, r4
 8000334:	1bdb      	subs	r3, r3, r7
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	e7a5      	b.n	8000288 <__udivmoddi4+0x9c>
 800033c:	f1c1 0720 	rsb	r7, r1, #32
 8000340:	408b      	lsls	r3, r1
 8000342:	fa22 fc07 	lsr.w	ip, r2, r7
 8000346:	ea4c 0c03 	orr.w	ip, ip, r3
 800034a:	fa24 f607 	lsr.w	r6, r4, r7
 800034e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000352:	fbb6 f8f9 	udiv	r8, r6, r9
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	fb09 6618 	mls	r6, r9, r8, r6
 800035e:	fa20 f307 	lsr.w	r3, r0, r7
 8000362:	408c      	lsls	r4, r1
 8000364:	fa00 fa01 	lsl.w	sl, r0, r1
 8000368:	fb08 f00e 	mul.w	r0, r8, lr
 800036c:	431c      	orrs	r4, r3
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000374:	4298      	cmp	r0, r3
 8000376:	fa02 f201 	lsl.w	r2, r2, r1
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x1a6>
 800037c:	eb1c 0303 	adds.w	r3, ip, r3
 8000380:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8000384:	f080 8081 	bcs.w	800048a <__udivmoddi4+0x29e>
 8000388:	4298      	cmp	r0, r3
 800038a:	d97e      	bls.n	800048a <__udivmoddi4+0x29e>
 800038c:	f1a8 0802 	sub.w	r8, r8, #2
 8000390:	4463      	add	r3, ip
 8000392:	1a1e      	subs	r6, r3, r0
 8000394:	fbb6 f3f9 	udiv	r3, r6, r9
 8000398:	fb09 6613 	mls	r6, r9, r3, r6
 800039c:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x1d0>
 80003aa:	eb1c 0404 	adds.w	r4, ip, r4
 80003ae:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003b2:	d266      	bcs.n	8000482 <__udivmoddi4+0x296>
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d964      	bls.n	8000482 <__udivmoddi4+0x296>
 80003b8:	3b02      	subs	r3, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c0:	fba0 8302 	umull	r8, r3, r0, r2
 80003c4:	eba4 040e 	sub.w	r4, r4, lr
 80003c8:	429c      	cmp	r4, r3
 80003ca:	46c6      	mov	lr, r8
 80003cc:	461e      	mov	r6, r3
 80003ce:	d350      	bcc.n	8000472 <__udivmoddi4+0x286>
 80003d0:	d04d      	beq.n	800046e <__udivmoddi4+0x282>
 80003d2:	b155      	cbz	r5, 80003ea <__udivmoddi4+0x1fe>
 80003d4:	ebba 030e 	subs.w	r3, sl, lr
 80003d8:	eb64 0406 	sbc.w	r4, r4, r6
 80003dc:	fa04 f707 	lsl.w	r7, r4, r7
 80003e0:	40cb      	lsrs	r3, r1
 80003e2:	431f      	orrs	r7, r3
 80003e4:	40cc      	lsrs	r4, r1
 80003e6:	e9c5 7400 	strd	r7, r4, [r5]
 80003ea:	2100      	movs	r1, #0
 80003ec:	e751      	b.n	8000292 <__udivmoddi4+0xa6>
 80003ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80003f2:	f1c2 0320 	rsb	r3, r2, #32
 80003f6:	40d9      	lsrs	r1, r3
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000400:	fa00 fe02 	lsl.w	lr, r0, r2
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1110 	mls	r1, r8, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	431c      	orrs	r4, r3
 8000410:	fa1f f78c 	uxth.w	r7, ip
 8000414:	0c23      	lsrs	r3, r4, #16
 8000416:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041a:	fb00 f107 	mul.w	r1, r0, r7
 800041e:	4299      	cmp	r1, r3
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x248>
 8000422:	eb1c 0303 	adds.w	r3, ip, r3
 8000426:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800042a:	d22c      	bcs.n	8000486 <__udivmoddi4+0x29a>
 800042c:	4299      	cmp	r1, r3
 800042e:	d92a      	bls.n	8000486 <__udivmoddi4+0x29a>
 8000430:	3802      	subs	r0, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	fbb3 f1f8 	udiv	r1, r3, r8
 800043a:	fb08 3311 	mls	r3, r8, r1, r3
 800043e:	b2a4      	uxth	r4, r4
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb01 f307 	mul.w	r3, r1, r7
 8000448:	42a3      	cmp	r3, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x272>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000454:	d213      	bcs.n	800047e <__udivmoddi4+0x292>
 8000456:	42a3      	cmp	r3, r4
 8000458:	d911      	bls.n	800047e <__udivmoddi4+0x292>
 800045a:	3902      	subs	r1, #2
 800045c:	4464      	add	r4, ip
 800045e:	1ae4      	subs	r4, r4, r3
 8000460:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000464:	e73b      	b.n	80002de <__udivmoddi4+0xf2>
 8000466:	4604      	mov	r4, r0
 8000468:	e6f2      	b.n	8000250 <__udivmoddi4+0x64>
 800046a:	4608      	mov	r0, r1
 800046c:	e708      	b.n	8000280 <__udivmoddi4+0x94>
 800046e:	45c2      	cmp	sl, r8
 8000470:	d2af      	bcs.n	80003d2 <__udivmoddi4+0x1e6>
 8000472:	ebb8 0e02 	subs.w	lr, r8, r2
 8000476:	eb63 060c 	sbc.w	r6, r3, ip
 800047a:	3801      	subs	r0, #1
 800047c:	e7a9      	b.n	80003d2 <__udivmoddi4+0x1e6>
 800047e:	4631      	mov	r1, r6
 8000480:	e7ed      	b.n	800045e <__udivmoddi4+0x272>
 8000482:	4603      	mov	r3, r0
 8000484:	e79a      	b.n	80003bc <__udivmoddi4+0x1d0>
 8000486:	4630      	mov	r0, r6
 8000488:	e7d4      	b.n	8000434 <__udivmoddi4+0x248>
 800048a:	46b0      	mov	r8, r6
 800048c:	e781      	b.n	8000392 <__udivmoddi4+0x1a6>
 800048e:	4463      	add	r3, ip
 8000490:	3802      	subs	r0, #2
 8000492:	e74f      	b.n	8000334 <__udivmoddi4+0x148>
 8000494:	4606      	mov	r6, r0
 8000496:	4623      	mov	r3, r4
 8000498:	4608      	mov	r0, r1
 800049a:	e711      	b.n	80002c0 <__udivmoddi4+0xd4>
 800049c:	3e02      	subs	r6, #2
 800049e:	4463      	add	r3, ip
 80004a0:	e732      	b.n	8000308 <__udivmoddi4+0x11c>
 80004a2:	bf00      	nop

080004a4 <__aeabi_idiv0>:
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <BMP280_Init>:
static int16_t dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

// Variável global para t_fine, usada nos cálculos de temperatura e pressão
static int32_t t_fine;

void BMP280_Init(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
    uint8_t bmp280_id;
    uint8_t reg_addr = BMP280_REG_ID; // Endereço do registrador de ID do BMP280
 80004ae:	23d0      	movs	r3, #208	@ 0xd0
 80004b0:	71bb      	strb	r3, [r7, #6]

    // Inicializar I2C (certifique-se de que a função I2C_Init está implementada)
    I2C_Init();
 80004b2:	f000 fc3f 	bl	8000d34 <I2C_Init>

    // Verificar se o BMP280 está pronto
    if (!I2C_IsDeviceReady(BMP280_ADDR, 10)) {
 80004b6:	210a      	movs	r1, #10
 80004b8:	2077      	movs	r0, #119	@ 0x77
 80004ba:	f000 fdc5 	bl	8001048 <I2C_IsDeviceReady>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d013      	beq.n	80004ec <BMP280_Init+0x44>
        // Se o dispositivo não estiver pronto, você pode lidar com o erro aqui
        return;
    }

    // Ler o ID do BMP280
    I2C_Write(BMP280_ADDR, &reg_addr, 1);
 80004c4:	1dbb      	adds	r3, r7, #6
 80004c6:	2201      	movs	r2, #1
 80004c8:	4619      	mov	r1, r3
 80004ca:	2077      	movs	r0, #119	@ 0x77
 80004cc:	f000 fcc2 	bl	8000e54 <I2C_Write>
    I2C_Read(BMP280_ADDR, &bmp280_id, 1);
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	2201      	movs	r2, #1
 80004d4:	4619      	mov	r1, r3
 80004d6:	2077      	movs	r0, #119	@ 0x77
 80004d8:	f000 fd28 	bl	8000f2c <I2C_Read>

    // Verificar se o ID está correto (0x58 para BMP280)
    if (bmp280_id != 0x58) {
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	2b58      	cmp	r3, #88	@ 0x58
 80004e0:	d106      	bne.n	80004f0 <BMP280_Init+0x48>
        // Se o ID não for o esperado, você pode lidar com o erro aqui
        return;
    }

    // Ler os dados de calibração
    BMP280_ReadCalibrationData();
 80004e2:	f000 f82d 	bl	8000540 <BMP280_ReadCalibrationData>

    // Configurar o BMP280
    BMP280_Config();
 80004e6:	f000 f8c3 	bl	8000670 <BMP280_Config>
 80004ea:	e002      	b.n	80004f2 <BMP280_Init+0x4a>
        return;
 80004ec:	bf00      	nop
 80004ee:	e000      	b.n	80004f2 <BMP280_Init+0x4a>
        return;
 80004f0:	bf00      	nop
}
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <BMP280_ReadTemperatureAndPressure>:

void BMP280_ReadTemperatureAndPressure(int32_t *temperature, uint32_t *pressure) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
    int32_t adc_T = 0, adc_P = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]

    // Ler os dados brutos de temperatura e pressão
    BMP280_ReadRawData(&adc_T, &adc_P);
 800050a:	f107 0208 	add.w	r2, r7, #8
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	4611      	mov	r1, r2
 8000514:	4618      	mov	r0, r3
 8000516:	f000 f8c6 	bl	80006a6 <BMP280_ReadRawData>

    // Calcular a temperatura real em centésimos de grau Celsius
    *temperature = BMP280_CalculateTemperature(adc_T);
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4618      	mov	r0, r3
 800051e:	f000 f8ef 	bl	8000700 <BMP280_CalculateTemperature>
 8000522:	4602      	mov	r2, r0
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	601a      	str	r2, [r3, #0]

    // Calcular a pressão real em Pa
    *pressure = BMP280_CalculatePressure(adc_P);
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f928 	bl	8000780 <BMP280_CalculatePressure>
 8000530:	4602      	mov	r2, r0
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	601a      	str	r2, [r3, #0]
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <BMP280_ReadCalibrationData>:

// Implementação das funções estáticas auxiliares

void BMP280_ReadCalibrationData(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
    uint8_t calib_data[24];
    uint8_t reg_addr = 0x88; // Endereço inicial dos dados de calibração
 8000546:	2388      	movs	r3, #136	@ 0x88
 8000548:	71fb      	strb	r3, [r7, #7]

    // Ler 24 bytes de dados de calibração a partir do endereço 0x88
    I2C_Write(BMP280_ADDR, &reg_addr, 1);
 800054a:	1dfb      	adds	r3, r7, #7
 800054c:	2201      	movs	r2, #1
 800054e:	4619      	mov	r1, r3
 8000550:	2077      	movs	r0, #119	@ 0x77
 8000552:	f000 fc7f 	bl	8000e54 <I2C_Write>
    I2C_Read(BMP280_ADDR, calib_data, 24);
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	2218      	movs	r2, #24
 800055c:	4619      	mov	r1, r3
 800055e:	2077      	movs	r0, #119	@ 0x77
 8000560:	f000 fce4 	bl	8000f2c <I2C_Read>

    // Converter os bytes lidos em valores de calibração
    dig_T1 = (uint16_t)(calib_data[1] << 8) | calib_data[0];
 8000564:	7a7b      	ldrb	r3, [r7, #9]
 8000566:	021b      	lsls	r3, r3, #8
 8000568:	b29b      	uxth	r3, r3
 800056a:	7a3a      	ldrb	r2, [r7, #8]
 800056c:	4313      	orrs	r3, r2
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b33      	ldr	r3, [pc, #204]	@ (8000640 <BMP280_ReadCalibrationData+0x100>)
 8000572:	801a      	strh	r2, [r3, #0]
    dig_T2 = (int16_t)(calib_data[3] << 8) | calib_data[2];
 8000574:	7afb      	ldrb	r3, [r7, #11]
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	b21a      	sxth	r2, r3
 800057a:	7abb      	ldrb	r3, [r7, #10]
 800057c:	b21b      	sxth	r3, r3
 800057e:	4313      	orrs	r3, r2
 8000580:	b21a      	sxth	r2, r3
 8000582:	4b30      	ldr	r3, [pc, #192]	@ (8000644 <BMP280_ReadCalibrationData+0x104>)
 8000584:	801a      	strh	r2, [r3, #0]
    dig_T3 = (int16_t)(calib_data[5] << 8) | calib_data[4];
 8000586:	7b7b      	ldrb	r3, [r7, #13]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	b21a      	sxth	r2, r3
 800058c:	7b3b      	ldrb	r3, [r7, #12]
 800058e:	b21b      	sxth	r3, r3
 8000590:	4313      	orrs	r3, r2
 8000592:	b21a      	sxth	r2, r3
 8000594:	4b2c      	ldr	r3, [pc, #176]	@ (8000648 <BMP280_ReadCalibrationData+0x108>)
 8000596:	801a      	strh	r2, [r3, #0]
    dig_P1 = (uint16_t)(calib_data[7] << 8) | calib_data[6];
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	021b      	lsls	r3, r3, #8
 800059c:	b29b      	uxth	r3, r3
 800059e:	7bba      	ldrb	r2, [r7, #14]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b29      	ldr	r3, [pc, #164]	@ (800064c <BMP280_ReadCalibrationData+0x10c>)
 80005a6:	801a      	strh	r2, [r3, #0]
    dig_P2 = (int16_t)(calib_data[9] << 8) | calib_data[8];
 80005a8:	7c7b      	ldrb	r3, [r7, #17]
 80005aa:	021b      	lsls	r3, r3, #8
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	7c3b      	ldrb	r3, [r7, #16]
 80005b0:	b21b      	sxth	r3, r3
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21a      	sxth	r2, r3
 80005b6:	4b26      	ldr	r3, [pc, #152]	@ (8000650 <BMP280_ReadCalibrationData+0x110>)
 80005b8:	801a      	strh	r2, [r3, #0]
    dig_P3 = (int16_t)(calib_data[11] << 8) | calib_data[10];
 80005ba:	7cfb      	ldrb	r3, [r7, #19]
 80005bc:	021b      	lsls	r3, r3, #8
 80005be:	b21a      	sxth	r2, r3
 80005c0:	7cbb      	ldrb	r3, [r7, #18]
 80005c2:	b21b      	sxth	r3, r3
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b21a      	sxth	r2, r3
 80005c8:	4b22      	ldr	r3, [pc, #136]	@ (8000654 <BMP280_ReadCalibrationData+0x114>)
 80005ca:	801a      	strh	r2, [r3, #0]
    dig_P4 = (int16_t)(calib_data[13] << 8) | calib_data[12];
 80005cc:	7d7b      	ldrb	r3, [r7, #21]
 80005ce:	021b      	lsls	r3, r3, #8
 80005d0:	b21a      	sxth	r2, r3
 80005d2:	7d3b      	ldrb	r3, [r7, #20]
 80005d4:	b21b      	sxth	r3, r3
 80005d6:	4313      	orrs	r3, r2
 80005d8:	b21a      	sxth	r2, r3
 80005da:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <BMP280_ReadCalibrationData+0x118>)
 80005dc:	801a      	strh	r2, [r3, #0]
    dig_P5 = (int16_t)(calib_data[15] << 8) | calib_data[14];
 80005de:	7dfb      	ldrb	r3, [r7, #23]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	7dbb      	ldrb	r3, [r7, #22]
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b21a      	sxth	r2, r3
 80005ec:	4b1b      	ldr	r3, [pc, #108]	@ (800065c <BMP280_ReadCalibrationData+0x11c>)
 80005ee:	801a      	strh	r2, [r3, #0]
    dig_P6 = (int16_t)(calib_data[17] << 8) | calib_data[16];
 80005f0:	7e7b      	ldrb	r3, [r7, #25]
 80005f2:	021b      	lsls	r3, r3, #8
 80005f4:	b21a      	sxth	r2, r3
 80005f6:	7e3b      	ldrb	r3, [r7, #24]
 80005f8:	b21b      	sxth	r3, r3
 80005fa:	4313      	orrs	r3, r2
 80005fc:	b21a      	sxth	r2, r3
 80005fe:	4b18      	ldr	r3, [pc, #96]	@ (8000660 <BMP280_ReadCalibrationData+0x120>)
 8000600:	801a      	strh	r2, [r3, #0]
    dig_P7 = (int16_t)(calib_data[19] << 8) | calib_data[18];
 8000602:	7efb      	ldrb	r3, [r7, #27]
 8000604:	021b      	lsls	r3, r3, #8
 8000606:	b21a      	sxth	r2, r3
 8000608:	7ebb      	ldrb	r3, [r7, #26]
 800060a:	b21b      	sxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b21a      	sxth	r2, r3
 8000610:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <BMP280_ReadCalibrationData+0x124>)
 8000612:	801a      	strh	r2, [r3, #0]
    dig_P8 = (int16_t)(calib_data[21] << 8) | calib_data[20];
 8000614:	7f7b      	ldrb	r3, [r7, #29]
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	b21a      	sxth	r2, r3
 800061a:	7f3b      	ldrb	r3, [r7, #28]
 800061c:	b21b      	sxth	r3, r3
 800061e:	4313      	orrs	r3, r2
 8000620:	b21a      	sxth	r2, r3
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <BMP280_ReadCalibrationData+0x128>)
 8000624:	801a      	strh	r2, [r3, #0]
    dig_P9 = (int16_t)(calib_data[23] << 8) | calib_data[22];
 8000626:	7ffb      	ldrb	r3, [r7, #31]
 8000628:	021b      	lsls	r3, r3, #8
 800062a:	b21a      	sxth	r2, r3
 800062c:	7fbb      	ldrb	r3, [r7, #30]
 800062e:	b21b      	sxth	r3, r3
 8000630:	4313      	orrs	r3, r2
 8000632:	b21a      	sxth	r2, r3
 8000634:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <BMP280_ReadCalibrationData+0x12c>)
 8000636:	801a      	strh	r2, [r3, #0]
}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000070 	.word	0x20000070
 8000644:	20000072 	.word	0x20000072
 8000648:	20000074 	.word	0x20000074
 800064c:	20000076 	.word	0x20000076
 8000650:	20000078 	.word	0x20000078
 8000654:	2000007a 	.word	0x2000007a
 8000658:	2000007c 	.word	0x2000007c
 800065c:	2000007e 	.word	0x2000007e
 8000660:	20000080 	.word	0x20000080
 8000664:	20000082 	.word	0x20000082
 8000668:	20000084 	.word	0x20000084
 800066c:	20000086 	.word	0x20000086

08000670 <BMP280_Config>:

void BMP280_Config(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
    uint8_t config_data[2];

    // Configurar ctrl_meas (0xF4): temperatura e pressão com oversampling x1, modo normal
    config_data[0] = 0xF4; // Endereço do registrador ctrl_meas
 8000676:	23f4      	movs	r3, #244	@ 0xf4
 8000678:	713b      	strb	r3, [r7, #4]
    config_data[1] = 0x27; // 0b00100111
 800067a:	2327      	movs	r3, #39	@ 0x27
 800067c:	717b      	strb	r3, [r7, #5]
    I2C_Write(BMP280_ADDR, config_data, 2);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2202      	movs	r2, #2
 8000682:	4619      	mov	r1, r3
 8000684:	2077      	movs	r0, #119	@ 0x77
 8000686:	f000 fbe5 	bl	8000e54 <I2C_Write>

    // Configurar config (0xF5): filtro off, tempo de stand-by 0.5ms
    config_data[0] = 0xF5; // Endereço do registrador config
 800068a:	23f5      	movs	r3, #245	@ 0xf5
 800068c:	713b      	strb	r3, [r7, #4]
    config_data[1] = 0xA0; // 0b10100000
 800068e:	23a0      	movs	r3, #160	@ 0xa0
 8000690:	717b      	strb	r3, [r7, #5]
    I2C_Write(BMP280_ADDR, config_data, 2);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2202      	movs	r2, #2
 8000696:	4619      	mov	r1, r3
 8000698:	2077      	movs	r0, #119	@ 0x77
 800069a:	f000 fbdb 	bl	8000e54 <I2C_Write>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <BMP280_ReadRawData>:

void BMP280_ReadRawData(int32_t *adc_T, int32_t *adc_P) {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t reg_addr = 0xF7; // Endereço do registrador de dados (pressão e temperatura)
 80006b0:	23f7      	movs	r3, #247	@ 0xf7
 80006b2:	73fb      	strb	r3, [r7, #15]

    // Ler 6 bytes de dados a partir do endereço 0xF7
    I2C_Write(BMP280_ADDR, &reg_addr, 1);
 80006b4:	f107 030f 	add.w	r3, r7, #15
 80006b8:	2201      	movs	r2, #1
 80006ba:	4619      	mov	r1, r3
 80006bc:	2077      	movs	r0, #119	@ 0x77
 80006be:	f000 fbc9 	bl	8000e54 <I2C_Write>
    I2C_Read(BMP280_ADDR, data, 6);
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	2206      	movs	r2, #6
 80006c8:	4619      	mov	r1, r3
 80006ca:	2077      	movs	r0, #119	@ 0x77
 80006cc:	f000 fc2e 	bl	8000f2c <I2C_Read>

    // Combinar os bytes para formar os valores brutos de pressão e temperatura
    *adc_P = ((int32_t)(data[0] << 16) | (int32_t)(data[1] << 8) | data[2]) >> 4;
 80006d0:	7c3b      	ldrb	r3, [r7, #16]
 80006d2:	041a      	lsls	r2, r3, #16
 80006d4:	7c7b      	ldrb	r3, [r7, #17]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	4313      	orrs	r3, r2
 80006da:	7cba      	ldrb	r2, [r7, #18]
 80006dc:	4313      	orrs	r3, r2
 80006de:	111a      	asrs	r2, r3, #4
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	601a      	str	r2, [r3, #0]
    *adc_T = ((int32_t)(data[3] << 16) | (int32_t)(data[4] << 8) | data[5]) >> 4;
 80006e4:	7cfb      	ldrb	r3, [r7, #19]
 80006e6:	041a      	lsls	r2, r3, #16
 80006e8:	7d3b      	ldrb	r3, [r7, #20]
 80006ea:	021b      	lsls	r3, r3, #8
 80006ec:	4313      	orrs	r3, r2
 80006ee:	7d7a      	ldrb	r2, [r7, #21]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	111a      	asrs	r2, r3, #4
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	601a      	str	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <BMP280_CalculateTemperature>:

int32_t BMP280_CalculateTemperature(int32_t adc_T) {
 8000700:	b480      	push	{r7}
 8000702:	b087      	sub	sp, #28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
    int32_t var1, var2, T;

    var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	10da      	asrs	r2, r3, #3
 800070c:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <BMP280_CalculateTemperature+0x70>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	4a17      	ldr	r2, [pc, #92]	@ (8000774 <BMP280_CalculateTemperature+0x74>)
 8000716:	f9b2 2000 	ldrsh.w	r2, [r2]
 800071a:	fb02 f303 	mul.w	r3, r2, r3
 800071e:	12db      	asrs	r3, r3, #11
 8000720:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	111b      	asrs	r3, r3, #4
 8000726:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <BMP280_CalculateTemperature+0x70>)
 8000728:	8812      	ldrh	r2, [r2, #0]
 800072a:	1a9b      	subs	r3, r3, r2
             ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	1112      	asrs	r2, r2, #4
 8000730:	490f      	ldr	r1, [pc, #60]	@ (8000770 <BMP280_CalculateTemperature+0x70>)
 8000732:	8809      	ldrh	r1, [r1, #0]
 8000734:	1a52      	subs	r2, r2, r1
    var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 8000736:	fb02 f303 	mul.w	r3, r2, r3
             ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 800073a:	131b      	asrs	r3, r3, #12
             ((int32_t)dig_T3)) >> 14;
 800073c:	4a0e      	ldr	r2, [pc, #56]	@ (8000778 <BMP280_CalculateTemperature+0x78>)
 800073e:	f9b2 2000 	ldrsh.w	r2, [r2]
             ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 8000742:	fb02 f303 	mul.w	r3, r2, r3
    var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 8000746:	139b      	asrs	r3, r3, #14
 8000748:	613b      	str	r3, [r7, #16]

    t_fine = var1 + var2;
 800074a:	697a      	ldr	r2, [r7, #20]
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	4413      	add	r3, r2
 8000750:	4a0a      	ldr	r2, [pc, #40]	@ (800077c <BMP280_CalculateTemperature+0x7c>)
 8000752:	6013      	str	r3, [r2, #0]

    T = (t_fine * 5 + 128) >> 8;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <BMP280_CalculateTemperature+0x7c>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	3380      	adds	r3, #128	@ 0x80
 8000760:	121b      	asrs	r3, r3, #8
 8000762:	60fb      	str	r3, [r7, #12]

    return T; // Retorna a temperatura em centésimos de grau Celsius
 8000764:	68fb      	ldr	r3, [r7, #12]
}
 8000766:	4618      	mov	r0, r3
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	20000070 	.word	0x20000070
 8000774:	20000072 	.word	0x20000072
 8000778:	20000074 	.word	0x20000074
 800077c:	20000088 	.word	0x20000088

08000780 <BMP280_CalculatePressure>:

uint32_t BMP280_CalculatePressure(int32_t adc_P) {
 8000780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000784:	b0cc      	sub	sp, #304	@ 0x130
 8000786:	af00      	add	r7, sp, #0
 8000788:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    int64_t var1, var2, p;

    var1 = ((int64_t)t_fine) - 128000;
 800078c:	4bae      	ldr	r3, [pc, #696]	@ (8000a48 <BMP280_CalculatePressure+0x2c8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	17da      	asrs	r2, r3, #31
 8000792:	461c      	mov	r4, r3
 8000794:	4615      	mov	r5, r2
 8000796:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800079a:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 800079e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
    var2 = var1 * var1 * (int64_t)dig_P6;
 80007a2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80007a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80007aa:	fb03 f102 	mul.w	r1, r3, r2
 80007ae:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80007b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80007b6:	fb02 f303 	mul.w	r3, r2, r3
 80007ba:	18ca      	adds	r2, r1, r3
 80007bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80007c0:	fba3 8903 	umull	r8, r9, r3, r3
 80007c4:	eb02 0309 	add.w	r3, r2, r9
 80007c8:	4699      	mov	r9, r3
 80007ca:	4ba0      	ldr	r3, [pc, #640]	@ (8000a4c <BMP280_CalculatePressure+0x2cc>)
 80007cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	17da      	asrs	r2, r3, #31
 80007d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80007d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80007dc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80007e0:	4603      	mov	r3, r0
 80007e2:	fb03 f209 	mul.w	r2, r3, r9
 80007e6:	460b      	mov	r3, r1
 80007e8:	fb08 f303 	mul.w	r3, r8, r3
 80007ec:	4413      	add	r3, r2
 80007ee:	4602      	mov	r2, r0
 80007f0:	fba8 2102 	umull	r2, r1, r8, r2
 80007f4:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 80007f8:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80007fc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000800:	4413      	add	r3, r2
 8000802:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000806:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800080a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 800080e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
 8000812:	4b8f      	ldr	r3, [pc, #572]	@ (8000a50 <BMP280_CalculatePressure+0x2d0>)
 8000814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000818:	b21b      	sxth	r3, r3
 800081a:	17da      	asrs	r2, r3, #31
 800081c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000820:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000824:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000828:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800082c:	462a      	mov	r2, r5
 800082e:	fb02 f203 	mul.w	r2, r2, r3
 8000832:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000836:	4621      	mov	r1, r4
 8000838:	fb01 f303 	mul.w	r3, r1, r3
 800083c:	441a      	add	r2, r3
 800083e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000842:	4621      	mov	r1, r4
 8000844:	fba3 3101 	umull	r3, r1, r3, r1
 8000848:	f8c7 110c 	str.w	r1, [r7, #268]	@ 0x10c
 800084c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000850:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000854:	18d3      	adds	r3, r2, r3
 8000856:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	f04f 0100 	mov.w	r1, #0
 8000862:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8000866:	462b      	mov	r3, r5
 8000868:	0459      	lsls	r1, r3, #17
 800086a:	4622      	mov	r2, r4
 800086c:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8000870:	4623      	mov	r3, r4
 8000872:	0458      	lsls	r0, r3, #17
 8000874:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000878:	1814      	adds	r4, r2, r0
 800087a:	64bc      	str	r4, [r7, #72]	@ 0x48
 800087c:	414b      	adcs	r3, r1
 800087e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000880:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8000884:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var2 = var2 + (((int64_t)dig_P4) << 35);
 8000888:	4b72      	ldr	r3, [pc, #456]	@ (8000a54 <BMP280_CalculatePressure+0x2d4>)
 800088a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800088e:	b21b      	sxth	r3, r3
 8000890:	17da      	asrs	r2, r3, #31
 8000892:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000896:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800089a:	f04f 0000 	mov.w	r0, #0
 800089e:	f04f 0100 	mov.w	r1, #0
 80008a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80008a6:	00d9      	lsls	r1, r3, #3
 80008a8:	2000      	movs	r0, #0
 80008aa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80008ae:	1814      	adds	r4, r2, r0
 80008b0:	643c      	str	r4, [r7, #64]	@ 0x40
 80008b2:	414b      	adcs	r3, r1
 80008b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80008b6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80008ba:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) + ((var1 * (int64_t)dig_P2) << 12);
 80008be:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80008c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80008c6:	fb03 f102 	mul.w	r1, r3, r2
 80008ca:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80008ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80008d2:	fb02 f303 	mul.w	r3, r2, r3
 80008d6:	18ca      	adds	r2, r1, r3
 80008d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80008dc:	fba3 3103 	umull	r3, r1, r3, r3
 80008e0:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80008e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80008e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80008f2:	4b59      	ldr	r3, [pc, #356]	@ (8000a58 <BMP280_CalculatePressure+0x2d8>)
 80008f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	17da      	asrs	r2, r3, #31
 80008fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000900:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000904:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8000908:	4622      	mov	r2, r4
 800090a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800090e:	4641      	mov	r1, r8
 8000910:	fb01 f202 	mul.w	r2, r1, r2
 8000914:	464d      	mov	r5, r9
 8000916:	4618      	mov	r0, r3
 8000918:	4621      	mov	r1, r4
 800091a:	4603      	mov	r3, r0
 800091c:	fb03 f305 	mul.w	r3, r3, r5
 8000920:	4413      	add	r3, r2
 8000922:	4602      	mov	r2, r0
 8000924:	4641      	mov	r1, r8
 8000926:	fba2 2101 	umull	r2, r1, r2, r1
 800092a:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 800092e:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8000932:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8000936:	4413      	add	r3, r2
 8000938:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	f04f 0100 	mov.w	r1, #0
 8000944:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000948:	4623      	mov	r3, r4
 800094a:	0a18      	lsrs	r0, r3, #8
 800094c:	462a      	mov	r2, r5
 800094e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8000952:	462b      	mov	r3, r5
 8000954:	1219      	asrs	r1, r3, #8
 8000956:	4b41      	ldr	r3, [pc, #260]	@ (8000a5c <BMP280_CalculatePressure+0x2dc>)
 8000958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095c:	b21b      	sxth	r3, r3
 800095e:	17da      	asrs	r2, r3, #31
 8000960:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000964:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000968:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800096c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000970:	464a      	mov	r2, r9
 8000972:	fb02 f203 	mul.w	r2, r2, r3
 8000976:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800097a:	4644      	mov	r4, r8
 800097c:	fb04 f303 	mul.w	r3, r4, r3
 8000980:	441a      	add	r2, r3
 8000982:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000986:	4644      	mov	r4, r8
 8000988:	fba3 3404 	umull	r3, r4, r3, r4
 800098c:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 8000990:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8000994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000998:	18d3      	adds	r3, r2, r3
 800099a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800099e:	f04f 0200 	mov.w	r2, #0
 80009a2:	f04f 0300 	mov.w	r3, #0
 80009a6:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 80009aa:	464c      	mov	r4, r9
 80009ac:	0323      	lsls	r3, r4, #12
 80009ae:	46c4      	mov	ip, r8
 80009b0:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 80009b4:	4644      	mov	r4, r8
 80009b6:	0322      	lsls	r2, r4, #12
 80009b8:	1884      	adds	r4, r0, r2
 80009ba:	63bc      	str	r4, [r7, #56]	@ 0x38
 80009bc:	eb41 0303 	adc.w	r3, r1, r3
 80009c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009c2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80009c6:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;
 80009ca:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80009ce:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80009d2:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 80009d6:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80009da:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <BMP280_CalculatePressure+0x2e0>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	2200      	movs	r2, #0
 80009e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80009e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80009ea:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80009ee:	4622      	mov	r2, r4
 80009f0:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80009f4:	4641      	mov	r1, r8
 80009f6:	fb01 f202 	mul.w	r2, r1, r2
 80009fa:	464d      	mov	r5, r9
 80009fc:	4618      	mov	r0, r3
 80009fe:	4621      	mov	r1, r4
 8000a00:	4603      	mov	r3, r0
 8000a02:	fb03 f305 	mul.w	r3, r3, r5
 8000a06:	4413      	add	r3, r2
 8000a08:	4602      	mov	r2, r0
 8000a0a:	4641      	mov	r1, r8
 8000a0c:	fba2 2101 	umull	r2, r1, r2, r1
 8000a10:	f8c7 10ec 	str.w	r1, [r7, #236]	@ 0xec
 8000a14:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8000a18:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a1c:	4413      	add	r3, r2
 8000a1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a22:	f04f 0200 	mov.w	r2, #0
 8000a26:	f04f 0300 	mov.w	r3, #0
 8000a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8000a2e:	4629      	mov	r1, r5
 8000a30:	104a      	asrs	r2, r1, #1
 8000a32:	4629      	mov	r1, r5
 8000a34:	17cb      	asrs	r3, r1, #31
 8000a36:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

    if (var1 == 0) {
 8000a3a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	d110      	bne.n	8000a64 <BMP280_CalculatePressure+0x2e4>
        return 0; // Evitar divisão por zero
 8000a42:	2300      	movs	r3, #0
 8000a44:	e16a      	b.n	8000d1c <BMP280_CalculatePressure+0x59c>
 8000a46:	bf00      	nop
 8000a48:	20000088 	.word	0x20000088
 8000a4c:	20000080 	.word	0x20000080
 8000a50:	2000007e 	.word	0x2000007e
 8000a54:	2000007c 	.word	0x2000007c
 8000a58:	2000007a 	.word	0x2000007a
 8000a5c:	20000078 	.word	0x20000078
 8000a60:	20000076 	.word	0x20000076
    }

    p = 1048576 - adc_P;
 8000a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000a68:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000a6c:	17da      	asrs	r2, r3, #31
 8000a6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a70:	637a      	str	r2, [r7, #52]	@ 0x34
 8000a72:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000a76:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    p = (((p << 31) - var2) * 3125) / var1;
 8000a7a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000a7e:	105b      	asrs	r3, r3, #1
 8000a80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000a84:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000a88:	07db      	lsls	r3, r3, #31
 8000a8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a8e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000a92:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8000a96:	4604      	mov	r4, r0
 8000a98:	1aa4      	subs	r4, r4, r2
 8000a9a:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 8000a9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000aa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000aa6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000aaa:	4622      	mov	r2, r4
 8000aac:	462b      	mov	r3, r5
 8000aae:	1891      	adds	r1, r2, r2
 8000ab0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000ab2:	415b      	adcs	r3, r3
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000aba:	4621      	mov	r1, r4
 8000abc:	1851      	adds	r1, r2, r1
 8000abe:	6239      	str	r1, [r7, #32]
 8000ac0:	4629      	mov	r1, r5
 8000ac2:	414b      	adcs	r3, r1
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ac6:	f04f 0200 	mov.w	r2, #0
 8000aca:	f04f 0300 	mov.w	r3, #0
 8000ace:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000ad2:	4649      	mov	r1, r9
 8000ad4:	018b      	lsls	r3, r1, #6
 8000ad6:	4641      	mov	r1, r8
 8000ad8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000adc:	4641      	mov	r1, r8
 8000ade:	018a      	lsls	r2, r1, #6
 8000ae0:	4641      	mov	r1, r8
 8000ae2:	1889      	adds	r1, r1, r2
 8000ae4:	61b9      	str	r1, [r7, #24]
 8000ae6:	4649      	mov	r1, r9
 8000ae8:	eb43 0101 	adc.w	r1, r3, r1
 8000aec:	61f9      	str	r1, [r7, #28]
 8000aee:	f04f 0200 	mov.w	r2, #0
 8000af2:	f04f 0300 	mov.w	r3, #0
 8000af6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000afa:	4649      	mov	r1, r9
 8000afc:	008b      	lsls	r3, r1, #2
 8000afe:	46c4      	mov	ip, r8
 8000b00:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8000b04:	4641      	mov	r1, r8
 8000b06:	008a      	lsls	r2, r1, #2
 8000b08:	4610      	mov	r0, r2
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4622      	mov	r2, r4
 8000b10:	189b      	adds	r3, r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	460b      	mov	r3, r1
 8000b16:	462a      	mov	r2, r5
 8000b18:	eb42 0303 	adc.w	r3, r2, r3
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	f04f 0200 	mov.w	r2, #0
 8000b22:	f04f 0300 	mov.w	r3, #0
 8000b26:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000b2a:	4649      	mov	r1, r9
 8000b2c:	008b      	lsls	r3, r1, #2
 8000b2e:	46c4      	mov	ip, r8
 8000b30:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8000b34:	4641      	mov	r1, r8
 8000b36:	008a      	lsls	r2, r1, #2
 8000b38:	4610      	mov	r0, r2
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4622      	mov	r2, r4
 8000b40:	189b      	adds	r3, r3, r2
 8000b42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000b44:	462b      	mov	r3, r5
 8000b46:	460a      	mov	r2, r1
 8000b48:	eb42 0303 	adc.w	r3, r2, r3
 8000b4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000b4e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000b52:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8000b56:	f7ff faf9 	bl	800014c <__aeabi_ldivmod>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8000b62:	4b71      	ldr	r3, [pc, #452]	@ (8000d28 <BMP280_CalculatePressure+0x5a8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	17da      	asrs	r2, r3, #31
 8000b6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8000b6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8000b70:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	f04f 0100 	mov.w	r1, #0
 8000b7c:	0b50      	lsrs	r0, r2, #13
 8000b7e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000b82:	1359      	asrs	r1, r3, #13
 8000b84:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8000b88:	462b      	mov	r3, r5
 8000b8a:	fb00 f203 	mul.w	r2, r0, r3
 8000b8e:	4623      	mov	r3, r4
 8000b90:	fb03 f301 	mul.w	r3, r3, r1
 8000b94:	4413      	add	r3, r2
 8000b96:	4622      	mov	r2, r4
 8000b98:	fba2 2100 	umull	r2, r1, r2, r0
 8000b9c:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8000ba0:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000ba4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000ba8:	4413      	add	r3, r2
 8000baa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000bae:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	f04f 0100 	mov.w	r1, #0
 8000bba:	0b50      	lsrs	r0, r2, #13
 8000bbc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000bc0:	1359      	asrs	r1, r3, #13
 8000bc2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000bc6:	462b      	mov	r3, r5
 8000bc8:	fb00 f203 	mul.w	r2, r0, r3
 8000bcc:	4623      	mov	r3, r4
 8000bce:	fb03 f301 	mul.w	r3, r3, r1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4622      	mov	r2, r4
 8000bd6:	fba2 2100 	umull	r2, r1, r2, r0
 8000bda:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8000bde:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000be2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000be6:	4413      	add	r3, r2
 8000be8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000bf8:	4621      	mov	r1, r4
 8000bfa:	0e4a      	lsrs	r2, r1, #25
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	4629      	mov	r1, r5
 8000c00:	460c      	mov	r4, r1
 8000c02:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8000c06:	164b      	asrs	r3, r1, #25
 8000c08:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    var2 = (((int64_t)dig_P8) * p) >> 19;
 8000c0c:	4b47      	ldr	r3, [pc, #284]	@ (8000d2c <BMP280_CalculatePressure+0x5ac>)
 8000c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	17da      	asrs	r2, r3, #31
 8000c16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000c18:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000c1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000c1e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000c22:	462a      	mov	r2, r5
 8000c24:	fb02 f203 	mul.w	r2, r2, r3
 8000c28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	fb01 f303 	mul.w	r3, r1, r3
 8000c32:	441a      	add	r2, r3
 8000c34:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000c38:	4621      	mov	r1, r4
 8000c3a:	fba3 3101 	umull	r3, r1, r3, r1
 8000c3e:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8000c42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8000c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000c4a:	18d3      	adds	r3, r2, r3
 8000c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000c50:	f04f 0200 	mov.w	r2, #0
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	0cca      	lsrs	r2, r1, #19
 8000c60:	4620      	mov	r0, r4
 8000c62:	4629      	mov	r1, r5
 8000c64:	460c      	mov	r4, r1
 8000c66:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8000c6a:	14cb      	asrs	r3, r1, #19
 8000c6c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

    p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
 8000c70:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8000c74:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000c78:	1884      	adds	r4, r0, r2
 8000c7a:	663c      	str	r4, [r7, #96]	@ 0x60
 8000c7c:	eb41 0303 	adc.w	r3, r1, r3
 8000c80:	667b      	str	r3, [r7, #100]	@ 0x64
 8000c82:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c86:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	1889      	adds	r1, r1, r2
 8000c8e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8000c90:	4629      	mov	r1, r5
 8000c92:	eb43 0101 	adc.w	r1, r3, r1
 8000c96:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8000c98:	f04f 0000 	mov.w	r0, #0
 8000c9c:	f04f 0100 	mov.w	r1, #0
 8000ca0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	0a18      	lsrs	r0, r3, #8
 8000ca8:	462a      	mov	r2, r5
 8000caa:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8000cae:	462b      	mov	r3, r5
 8000cb0:	1219      	asrs	r1, r3, #8
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <BMP280_CalculatePressure+0x5b0>)
 8000cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	17da      	asrs	r2, r3, #31
 8000cbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8000cbe:	657a      	str	r2, [r7, #84]	@ 0x54
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8000ccc:	464c      	mov	r4, r9
 8000cce:	0123      	lsls	r3, r4, #4
 8000cd0:	46c4      	mov	ip, r8
 8000cd2:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8000cd6:	4644      	mov	r4, r8
 8000cd8:	0122      	lsls	r2, r4, #4
 8000cda:	1884      	adds	r4, r0, r2
 8000cdc:	60bc      	str	r4, [r7, #8]
 8000cde:	eb41 0303 	adc.w	r3, r1, r3
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000ce8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

    p = p / 256; // Converter para Pa
 8000cec:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	da07      	bge.n	8000d04 <BMP280_CalculatePressure+0x584>
 8000cf4:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	f143 0300 	adc.w	r3, r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d04:	f04f 0000 	mov.w	r0, #0
 8000d08:	f04f 0100 	mov.w	r1, #0
 8000d0c:	0a10      	lsrs	r0, r2, #8
 8000d0e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000d12:	1219      	asrs	r1, r3, #8
 8000d14:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118

    return (uint32_t)p; // Retorna a pressão em Pa
 8000d18:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000d22:	46bd      	mov	sp, r7
 8000d24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000d28:	20000086 	.word	0x20000086
 8000d2c:	20000084 	.word	0x20000084
 8000d30:	20000082 	.word	0x20000082

08000d34 <I2C_Init>:
#include "uart.h"
#include "stm32f1xx.h"

//#define debugON
// Função para inicializar o I2C
void I2C_Init(void) {
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
    // Ativar clocks para I2C e GPIO
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;  // Ativar GPIOB (SCL, SDA)
 8000d38:	4b1b      	ldr	r3, [pc, #108]	@ (8000da8 <I2C_Init+0x74>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a1a      	ldr	r2, [pc, #104]	@ (8000da8 <I2C_Init+0x74>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;  // Ativar I2C1
 8000d44:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <I2C_Init+0x74>)
 8000d46:	69db      	ldr	r3, [r3, #28]
 8000d48:	4a17      	ldr	r2, [pc, #92]	@ (8000da8 <I2C_Init+0x74>)
 8000d4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d4e:	61d3      	str	r3, [r2, #28]

    // Reset I2C1 para estado inicial
    I2C1->CR1 |= I2C_CR1_SWRST;
 8000d50:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <I2C_Init+0x78>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a15      	ldr	r2, [pc, #84]	@ (8000dac <I2C_Init+0x78>)
 8000d56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d5a:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <I2C_Init+0x78>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <I2C_Init+0x78>)
 8000d62:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d66:	6013      	str	r3, [r2, #0]

    // Configurar PB6 (SCL) e PB7 (SDA) para I2C em modo alternativo open-drain
    GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_MODE7 | GPIO_CRL_CNF6 | GPIO_CRL_CNF7);
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <I2C_Init+0x7c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a10      	ldr	r2, [pc, #64]	@ (8000db0 <I2C_Init+0x7c>)
 8000d6e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000d72:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_MODE7_1) | (GPIO_CRL_CNF6 | GPIO_CRL_CNF7);  // 2 MHz, função alternada open-drain
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <I2C_Init+0x7c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <I2C_Init+0x7c>)
 8000d7a:	f043 436e 	orr.w	r3, r3, #3992977408	@ 0xee000000
 8000d7e:	6013      	str	r3, [r2, #0]

    // Configurar I2C: clock e tempo de subida
    I2C1->CR2 = 8;  // Freq do clock (MHz)
 8000d80:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <I2C_Init+0x78>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 40; // Clock para 100 kHz (para 8 MHz)
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <I2C_Init+0x78>)
 8000d88:	2228      	movs	r2, #40	@ 0x28
 8000d8a:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 9; // Tempo de subida
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <I2C_Init+0x78>)
 8000d8e:	2209      	movs	r2, #9
 8000d90:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;  // Habilitar I2C1
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <I2C_Init+0x78>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <I2C_Init+0x78>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6013      	str	r3, [r2, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40005400 	.word	0x40005400
 8000db0:	40010c00 	.word	0x40010c00

08000db4 <I2C_Start>:

// Função para gerar condição de start
int I2C_Start(void) {
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;  // Gerar condição de start
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <I2C_Start+0x48>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000dfc <I2C_Start+0x48>)
 8000dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc4:	6013      	str	r3, [r2, #0]
    uint32_t timeout = 10000;
 8000dc6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000dca:	607b      	str	r3, [r7, #4]
    while (!(I2C1->SR1 & I2C_SR1_SB) && timeout--) {}
 8000dcc:	bf00      	nop
 8000dce:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <I2C_Start+0x48>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d104      	bne.n	8000de4 <I2C_Start+0x30>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f4      	bne.n	8000dce <I2C_Start+0x1a>
    if (timeout == 0) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <I2C_Start+0x3c>
#ifdef debugON
        print_uart("Erro: Timeout em I2C_Start\n\r");
#endif
        return -1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dee:	e000      	b.n	8000df2 <I2C_Start+0x3e>
    } else {
#ifdef debugON
        print_uart("I2C_Start OK\n\r");
#endif
        return 0;
 8000df0:	2300      	movs	r3, #0
    }
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	40005400 	.word	0x40005400

08000e00 <I2C_Stop>:

// Função para gerar condição de stop
int I2C_Stop(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;  // Gerar condição de stop
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <I2C_Stop+0x4c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a10      	ldr	r2, [pc, #64]	@ (8000e4c <I2C_Stop+0x4c>)
 8000e0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e10:	6013      	str	r3, [r2, #0]
    // Aguardar até que o bit STOP seja limpo pelo hardware
    uint32_t timeout = 10000;
 8000e12:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000e16:	607b      	str	r3, [r7, #4]
    while ((I2C1->CR1 & I2C_CR1_STOP) && timeout--) {}
 8000e18:	bf00      	nop
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <I2C_Stop+0x4c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d004      	beq.n	8000e30 <I2C_Stop+0x30>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	1e5a      	subs	r2, r3, #1
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1f4      	bne.n	8000e1a <I2C_Stop+0x1a>
    if (timeout == 0) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d105      	bne.n	8000e42 <I2C_Stop+0x42>
        print_uart("Erro: Timeout em I2C_Stop\n\r");
 8000e36:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <I2C_Stop+0x50>)
 8000e38:	f000 fa92 	bl	8001360 <print_uart>
        return -1;
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e40:	e000      	b.n	8000e44 <I2C_Stop+0x44>
    } else {
#ifdef debugON
        print_uart("I2C_Stop OK\n\r");
#endif
        return 0;
 8000e42:	2300      	movs	r3, #0
    }
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	08001d90 	.word	0x08001d90

08000e54 <I2C_Write>:

// Função para escrever dados no barramento I2C
void I2C_Write(uint8_t SlaveAddress, uint8_t *data, uint16_t size) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	4613      	mov	r3, r2
 8000e62:	80bb      	strh	r3, [r7, #4]
    uint32_t timeout;

    // 1. Gerar condição de início (START)
    if (I2C_Start() != 0) {
 8000e64:	f7ff ffa6 	bl	8000db4 <I2C_Start>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d153      	bne.n	8000f16 <I2C_Write+0xc2>
        // Falha ao gerar START
        return;
    }

    // 2. Enviar endereço do dispositivo escravo com bit de escrita (0)
    I2C1->DR = I2C_WRITE_ADDR(SlaveAddress); // Usar macro para endereço de escrita
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4a2b      	ldr	r2, [pc, #172]	@ (8000f20 <I2C_Write+0xcc>)
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	6113      	str	r3, [r2, #16]

    // 3. Aguardar até que o bit ADDR seja definido (endereço enviado e reconhecido)
    timeout = 10000;
 8000e76:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000e7a:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF)) && timeout--) {}
 8000e7c:	bf00      	nop
 8000e7e:	4b28      	ldr	r3, [pc, #160]	@ (8000f20 <I2C_Write+0xcc>)
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	f240 4302 	movw	r3, #1026	@ 0x402
 8000e86:	4013      	ands	r3, r2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d104      	bne.n	8000e96 <I2C_Write+0x42>
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	1e5a      	subs	r2, r3, #1
 8000e90:	60fa      	str	r2, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f3      	bne.n	8000e7e <I2C_Write+0x2a>
    if (timeout == 0 || (I2C1->SR1 & I2C_SR1_AF)) {
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d005      	beq.n	8000ea8 <I2C_Write+0x54>
 8000e9c:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <I2C_Write+0xcc>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00b      	beq.n	8000ec0 <I2C_Write+0x6c>
        print_uart("Erro: Endereço não reconhecido em I2C_Write\n\r");
 8000ea8:	481e      	ldr	r0, [pc, #120]	@ (8000f24 <I2C_Write+0xd0>)
 8000eaa:	f000 fa59 	bl	8001360 <print_uart>
        I2C1->SR1 &= ~I2C_SR1_AF; // Limpar flag de falha de acknowledge
 8000eae:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <I2C_Write+0xcc>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f20 <I2C_Write+0xcc>)
 8000eb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000eb8:	6153      	str	r3, [r2, #20]
        I2C_Stop(); // Gerar condição de parada em caso de erro
 8000eba:	f7ff ffa1 	bl	8000e00 <I2C_Stop>
        return;
 8000ebe:	e02b      	b.n	8000f18 <I2C_Write+0xc4>
    }

    // Limpar registros SR1 e SR2 lendo-os (obrigatório após ADDR ser definido)
    (void)I2C1->SR1;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <I2C_Write+0xcc>)
 8000ec2:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <I2C_Write+0xcc>)
 8000ec6:	699b      	ldr	r3, [r3, #24]

    // 4. Enviar os dados
    while (size--) {
 8000ec8:	e01d      	b.n	8000f06 <I2C_Write+0xb2>
        // Escrever dado no registro de dados
        I2C1->DR = *data++;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	603a      	str	r2, [r7, #0]
 8000ed0:	781a      	ldrb	r2, [r3, #0]
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <I2C_Write+0xcc>)
 8000ed4:	611a      	str	r2, [r3, #16]

        // Aguardar até que o bit BTF (Byte Transfer Finished) seja definido
        timeout = 10000;
 8000ed6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000eda:	60fb      	str	r3, [r7, #12]
        while (!(I2C1->SR1 & I2C_SR1_BTF) && timeout--) {}
 8000edc:	bf00      	nop
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <I2C_Write+0xcc>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d104      	bne.n	8000ef4 <I2C_Write+0xa0>
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	1e5a      	subs	r2, r3, #1
 8000eee:	60fa      	str	r2, [r7, #12]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f4      	bne.n	8000ede <I2C_Write+0x8a>
        if (timeout == 0) {
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d105      	bne.n	8000f06 <I2C_Write+0xb2>
            print_uart("Erro: Timeout em I2C_Write durante envio de dados\n\r");
 8000efa:	480b      	ldr	r0, [pc, #44]	@ (8000f28 <I2C_Write+0xd4>)
 8000efc:	f000 fa30 	bl	8001360 <print_uart>
            I2C_Stop(); // Gerar condição de parada em caso de erro
 8000f00:	f7ff ff7e 	bl	8000e00 <I2C_Stop>
            return;
 8000f04:	e008      	b.n	8000f18 <I2C_Write+0xc4>
    while (size--) {
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	1e5a      	subs	r2, r3, #1
 8000f0a:	80ba      	strh	r2, [r7, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1dc      	bne.n	8000eca <I2C_Write+0x76>
        }
    }

    // 5. Gerar condição de parada (STOP)
    I2C_Stop();
 8000f10:	f7ff ff76 	bl	8000e00 <I2C_Stop>
 8000f14:	e000      	b.n	8000f18 <I2C_Write+0xc4>
        return;
 8000f16:	bf00      	nop
#ifdef debugON
    print_uart("I2C_Write OK\n\r");
#endif
}
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40005400 	.word	0x40005400
 8000f24:	08001dac 	.word	0x08001dac
 8000f28:	08001ddc 	.word	0x08001ddc

08000f2c <I2C_Read>:

// Função para ler dados do barramento I2C
void I2C_Read(uint8_t SlaveAddress, uint8_t *data, uint16_t size) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	80bb      	strh	r3, [r7, #4]
    uint32_t timeout;

    if (size == 0) return;
 8000f3c:	88bb      	ldrh	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d076      	beq.n	8001030 <I2C_Read+0x104>

    // 1. Gerar condição de início (START)
    if (I2C_Start() != 0) {
 8000f42:	f7ff ff37 	bl	8000db4 <I2C_Start>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d173      	bne.n	8001034 <I2C_Read+0x108>
        // Falha ao gerar START
        return;
    }

    // 2. Enviar endereço do dispositivo escravo com bit de leitura (1)
    I2C1->DR = I2C_READ_ADDR(SlaveAddress); // Usar macro para endereço de leitura
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	f043 0201 	orr.w	r2, r3, #1
 8000f54:	4b39      	ldr	r3, [pc, #228]	@ (800103c <I2C_Read+0x110>)
 8000f56:	611a      	str	r2, [r3, #16]

    // 3. Aguardar até que o bit ADDR seja definido (endereço enviado e reconhecido)
    timeout = 10000;
 8000f58:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000f5c:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF)) && timeout--) {}
 8000f5e:	bf00      	nop
 8000f60:	4b36      	ldr	r3, [pc, #216]	@ (800103c <I2C_Read+0x110>)
 8000f62:	695a      	ldr	r2, [r3, #20]
 8000f64:	f240 4302 	movw	r3, #1026	@ 0x402
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d104      	bne.n	8000f78 <I2C_Read+0x4c>
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1e5a      	subs	r2, r3, #1
 8000f72:	60fa      	str	r2, [r7, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f3      	bne.n	8000f60 <I2C_Read+0x34>
    if (timeout == 0 || (I2C1->SR1 & I2C_SR1_AF)) {
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d005      	beq.n	8000f8a <I2C_Read+0x5e>
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800103c <I2C_Read+0x110>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00b      	beq.n	8000fa2 <I2C_Read+0x76>
        print_uart("Erro: Endereço não reconhecido em I2C_Read\n\r");
 8000f8a:	482d      	ldr	r0, [pc, #180]	@ (8001040 <I2C_Read+0x114>)
 8000f8c:	f000 f9e8 	bl	8001360 <print_uart>
        I2C1->SR1 &= ~I2C_SR1_AF; // Limpar flag de falha de acknowledge
 8000f90:	4b2a      	ldr	r3, [pc, #168]	@ (800103c <I2C_Read+0x110>)
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	4a29      	ldr	r2, [pc, #164]	@ (800103c <I2C_Read+0x110>)
 8000f96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000f9a:	6153      	str	r3, [r2, #20]
        I2C_Stop(); // Gerar condição de parada em caso de erro
 8000f9c:	f7ff ff30 	bl	8000e00 <I2C_Stop>
        return;
 8000fa0:	e049      	b.n	8001036 <I2C_Read+0x10a>
    }

    // Limpar registros SR1 e SR2
    (void)I2C1->SR1;
 8000fa2:	4b26      	ldr	r3, [pc, #152]	@ (800103c <I2C_Read+0x110>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	@ (800103c <I2C_Read+0x110>)
 8000fa8:	699b      	ldr	r3, [r3, #24]

    // 4. Configurar ACK e NACK conforme o número de bytes a receber
    if (size == 1) {
 8000faa:	88bb      	ldrh	r3, [r7, #4]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d108      	bne.n	8000fc2 <I2C_Read+0x96>
        // Desabilitar ACK para receber apenas um byte
        I2C1->CR1 &= ~I2C_CR1_ACK;
 8000fb0:	4b22      	ldr	r3, [pc, #136]	@ (800103c <I2C_Read+0x110>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a21      	ldr	r2, [pc, #132]	@ (800103c <I2C_Read+0x110>)
 8000fb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000fba:	6013      	str	r3, [r2, #0]
        // Gerar condição de parada
        I2C_Stop();
 8000fbc:	f7ff ff20 	bl	8000e00 <I2C_Stop>
 8000fc0:	e030      	b.n	8001024 <I2C_Read+0xf8>
    } else {
        // Habilitar ACK para receber múltiplos bytes
        I2C1->CR1 |= I2C_CR1_ACK;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <I2C_Read+0x110>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800103c <I2C_Read+0x110>)
 8000fc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fcc:	6013      	str	r3, [r2, #0]
    }

    // 5. Ler os dados
    while (size--) {
 8000fce:	e029      	b.n	8001024 <I2C_Read+0xf8>
        // Aguardar até que o bit RXNE (Receive Buffer Not Empty) seja definido
        timeout = 10000;
 8000fd0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000fd4:	60fb      	str	r3, [r7, #12]
        while (!(I2C1->SR1 & I2C_SR1_RXNE) && timeout--) {}
 8000fd6:	bf00      	nop
 8000fd8:	4b18      	ldr	r3, [pc, #96]	@ (800103c <I2C_Read+0x110>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d104      	bne.n	8000fee <I2C_Read+0xc2>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	1e5a      	subs	r2, r3, #1
 8000fe8:	60fa      	str	r2, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f4      	bne.n	8000fd8 <I2C_Read+0xac>
        if (timeout == 0) {
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d105      	bne.n	8001000 <I2C_Read+0xd4>
            print_uart("Erro: Timeout em I2C_Read durante recepção de dados\n\r");
 8000ff4:	4813      	ldr	r0, [pc, #76]	@ (8001044 <I2C_Read+0x118>)
 8000ff6:	f000 f9b3 	bl	8001360 <print_uart>
            I2C_Stop(); // Gerar condição de parada em caso de erro
 8000ffa:	f7ff ff01 	bl	8000e00 <I2C_Stop>
            return;
 8000ffe:	e01a      	b.n	8001036 <I2C_Read+0x10a>
        }

        // Ler dado do registro de dados
        *data++ = I2C1->DR;
 8001000:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <I2C_Read+0x110>)
 8001002:	6919      	ldr	r1, [r3, #16]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	603a      	str	r2, [r7, #0]
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]

        // Se restar apenas um byte, desabilitar ACK e gerar STOP
        if (size == 1) {
 800100e:	88bb      	ldrh	r3, [r7, #4]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d107      	bne.n	8001024 <I2C_Read+0xf8>
            I2C1->CR1 &= ~I2C_CR1_ACK;
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <I2C_Read+0x110>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a08      	ldr	r2, [pc, #32]	@ (800103c <I2C_Read+0x110>)
 800101a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800101e:	6013      	str	r3, [r2, #0]
            I2C_Stop();
 8001020:	f7ff feee 	bl	8000e00 <I2C_Stop>
    while (size--) {
 8001024:	88bb      	ldrh	r3, [r7, #4]
 8001026:	1e5a      	subs	r2, r3, #1
 8001028:	80ba      	strh	r2, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1d0      	bne.n	8000fd0 <I2C_Read+0xa4>
 800102e:	e002      	b.n	8001036 <I2C_Read+0x10a>
    if (size == 0) return;
 8001030:	bf00      	nop
 8001032:	e000      	b.n	8001036 <I2C_Read+0x10a>
        return;
 8001034:	bf00      	nop
        }
    }
#ifdef debugON
    print_uart("I2C_Read OK\n\r");
#endif
}
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40005400 	.word	0x40005400
 8001040:	08001e10 	.word	0x08001e10
 8001044:	08001e40 	.word	0x08001e40

08001048 <I2C_IsDeviceReady>:

// Função para verificar se o dispositivo está pronto
uint8_t I2C_IsDeviceReady(uint8_t SlaveAddress, uint32_t Trials) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
    uint32_t timeout;
    uint16_t attempts = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	817b      	strh	r3, [r7, #10]

    while (attempts < Trials) {
 8001058:	e047      	b.n	80010ea <I2C_IsDeviceReady+0xa2>
        // Gerar condição de início (START)
        if (I2C_Start() != 0) {
 800105a:	f7ff feab 	bl	8000db4 <I2C_Start>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <I2C_IsDeviceReady+0x24>
            attempts++;
 8001064:	897b      	ldrh	r3, [r7, #10]
 8001066:	3301      	adds	r3, #1
 8001068:	817b      	strh	r3, [r7, #10]
            continue;
 800106a:	e03e      	b.n	80010ea <I2C_IsDeviceReady+0xa2>
        }

        // Enviar endereço do dispositivo escravo com bit de escrita (0)
        I2C1->DR = I2C_WRITE_ADDR(SlaveAddress); // Usar macro para endereço de escrita
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4a25      	ldr	r2, [pc, #148]	@ (8001104 <I2C_IsDeviceReady+0xbc>)
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	6113      	str	r3, [r2, #16]

        // Aguardar até que o bit ADDR ou AF seja definido
        timeout = 10000;
 8001074:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001078:	60fb      	str	r3, [r7, #12]
        while (!(I2C1->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF)) && timeout--) {}
 800107a:	bf00      	nop
 800107c:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <I2C_IsDeviceReady+0xbc>)
 800107e:	695a      	ldr	r2, [r3, #20]
 8001080:	f240 4302 	movw	r3, #1026	@ 0x402
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d104      	bne.n	8001094 <I2C_IsDeviceReady+0x4c>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	1e5a      	subs	r2, r3, #1
 800108e:	60fa      	str	r2, [r7, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f3      	bne.n	800107c <I2C_IsDeviceReady+0x34>
        if (timeout == 0) {
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d105      	bne.n	80010a6 <I2C_IsDeviceReady+0x5e>
            I2C_Stop();
 800109a:	f7ff feb1 	bl	8000e00 <I2C_Stop>
            attempts++;
 800109e:	897b      	ldrh	r3, [r7, #10]
 80010a0:	3301      	adds	r3, #1
 80010a2:	817b      	strh	r3, [r7, #10]
            continue;
 80010a4:	e021      	b.n	80010ea <I2C_IsDeviceReady+0xa2>
        }

        if (I2C1->SR1 & I2C_SR1_ADDR) {
 80010a6:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <I2C_IsDeviceReady+0xbc>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <I2C_IsDeviceReady+0x7a>
            // Dispositivo respondeu
            // Limpar registros SR1 e SR2
            (void)I2C1->SR1;
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <I2C_IsDeviceReady+0xbc>)
 80010b4:	695b      	ldr	r3, [r3, #20]
            (void)I2C1->SR2;
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <I2C_IsDeviceReady+0xbc>)
 80010b8:	699b      	ldr	r3, [r3, #24]
            I2C_Stop();
 80010ba:	f7ff fea1 	bl	8000e00 <I2C_Stop>
#ifdef debugON
            print_uart("Dispositivo encontrado\n\r");
#endif
            return 1; // Dispositivo está pronto
 80010be:	2301      	movs	r3, #1
 80010c0:	e01b      	b.n	80010fa <I2C_IsDeviceReady+0xb2>
        } else if (I2C1->SR1 & I2C_SR1_AF) {
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <I2C_IsDeviceReady+0xbc>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00a      	beq.n	80010e4 <I2C_IsDeviceReady+0x9c>
            // Falha ao reconhecer endereço, limpar flag AF
            I2C1->SR1 &= ~I2C_SR1_AF;
 80010ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <I2C_IsDeviceReady+0xbc>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001104 <I2C_IsDeviceReady+0xbc>)
 80010d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80010d8:	6153      	str	r3, [r2, #20]
            print_uart("Falha ao reconhecer endereço\n\r");
 80010da:	480b      	ldr	r0, [pc, #44]	@ (8001108 <I2C_IsDeviceReady+0xc0>)
 80010dc:	f000 f940 	bl	8001360 <print_uart>
            I2C_Stop();
 80010e0:	f7ff fe8e 	bl	8000e00 <I2C_Stop>
        }

        attempts++;
 80010e4:	897b      	ldrh	r3, [r7, #10]
 80010e6:	3301      	adds	r3, #1
 80010e8:	817b      	strh	r3, [r7, #10]
    while (attempts < Trials) {
 80010ea:	897b      	ldrh	r3, [r7, #10]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d8b3      	bhi.n	800105a <I2C_IsDeviceReady+0x12>
    }

    print_uart("Dispositivo não está pronto após múltiplas tentativas\n\r");
 80010f2:	4806      	ldr	r0, [pc, #24]	@ (800110c <I2C_IsDeviceReady+0xc4>)
 80010f4:	f000 f934 	bl	8001360 <print_uart>
    return 0; // Dispositivo não está pronto
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40005400 	.word	0x40005400
 8001108:	08001e78 	.word	0x08001e78
 800110c:	08001e98 	.word	0x08001e98

08001110 <SysTick_Init>:
#include "i2c.h"
#include "uart.h"
#include "bmp280.h"
#include "stm32f1xx.h"

void SysTick_Init(void) {
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
    // Assumindo que o clock do sistema é 72 MHz
    SysTick->LOAD = 8000 - 1; // Carrega o valor para 1 ms (72 MHz / 1000)
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <SysTick_Init+0x20>)
 8001116:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800111a:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;          // Limpa o valor atual
 800111c:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <SysTick_Init+0x20>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8001122:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <SysTick_Init+0x20>)
 8001124:	2205      	movs	r2, #5
 8001126:	601a      	str	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	e000e010 	.word	0xe000e010

08001134 <Delay_ms>:

void Delay_ms(uint32_t ms) {
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms; i++) {
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e009      	b.n	8001156 <Delay_ms+0x22>
        // Aguarda até que o contador atinja zero
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk));
 8001142:	bf00      	nop
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <Delay_ms+0x38>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f9      	beq.n	8001144 <Delay_ms+0x10>
    for (uint32_t i = 0; i < ms; i++) {
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	429a      	cmp	r2, r3
 800115c:	d3f1      	bcc.n	8001142 <Delay_ms+0xe>
    }
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <main>:

int main(void) {
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b09f      	sub	sp, #124	@ 0x7c
 8001174:	af00      	add	r7, sp, #0
    // Inicializar UART
    UART_Init();
 8001176:	f000 f8bf 	bl	80012f8 <UART_Init>

    SysTick_Init();
 800117a:	f7ff ffc9 	bl	8001110 <SysTick_Init>

    print_uart("Inicialização concluída\n\r");
 800117e:	4826      	ldr	r0, [pc, #152]	@ (8001218 <main+0xa8>)
 8001180:	f000 f8ee 	bl	8001360 <print_uart>

    // Inicializar o BMP280
    BMP280_Init();
 8001184:	f7ff f990 	bl	80004a8 <BMP280_Init>

    // Variáveis para armazenar as leituras
    int32_t temperature = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t pressure = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	66bb      	str	r3, [r7, #104]	@ 0x68
    char buffer[100];

    // Loop principal para ler dados continuamente
    while (1) {
        // Ler temperatura e pressão
        BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001190:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001194:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9ac 	bl	80004f8 <BMP280_ReadTemperatureAndPressure>

        // Formatar e imprimir os resultados
        sprintf(buffer, "Temperatura: %ld.%02ld °C\n\r", temperature / 100, temperature % 100);
 80011a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011a2:	4a1e      	ldr	r2, [pc, #120]	@ (800121c <main+0xac>)
 80011a4:	fb82 1203 	smull	r1, r2, r2, r3
 80011a8:	1152      	asrs	r2, r2, #5
 80011aa:	17db      	asrs	r3, r3, #31
 80011ac:	1ad4      	subs	r4, r2, r3
 80011ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011b0:	4a1a      	ldr	r2, [pc, #104]	@ (800121c <main+0xac>)
 80011b2:	fb82 1203 	smull	r1, r2, r2, r3
 80011b6:	1151      	asrs	r1, r2, #5
 80011b8:	17da      	asrs	r2, r3, #31
 80011ba:	1a8a      	subs	r2, r1, r2
 80011bc:	2164      	movs	r1, #100	@ 0x64
 80011be:	fb01 f202 	mul.w	r2, r1, r2
 80011c2:	1a9a      	subs	r2, r3, r2
 80011c4:	1d38      	adds	r0, r7, #4
 80011c6:	4613      	mov	r3, r2
 80011c8:	4622      	mov	r2, r4
 80011ca:	4915      	ldr	r1, [pc, #84]	@ (8001220 <main+0xb0>)
 80011cc:	f000 f92c 	bl	8001428 <siprintf>
        print_uart(buffer);
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f8c4 	bl	8001360 <print_uart>

        uint32_t pres_hpa_int = pressure / 100; // Parte inteira em hPa
 80011d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80011da:	4a10      	ldr	r2, [pc, #64]	@ (800121c <main+0xac>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	095b      	lsrs	r3, r3, #5
 80011e2:	677b      	str	r3, [r7, #116]	@ 0x74
        uint32_t pres_hpa_dec = pressure % 100; // Duas casas decimais
 80011e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80011e6:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <main+0xac>)
 80011e8:	fba2 1203 	umull	r1, r2, r2, r3
 80011ec:	0952      	lsrs	r2, r2, #5
 80011ee:	2164      	movs	r1, #100	@ 0x64
 80011f0:	fb01 f202 	mul.w	r2, r1, r2
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	673b      	str	r3, [r7, #112]	@ 0x70

        sprintf(buffer, "Pressão: %lu.%02lu hPa\n\r", pres_hpa_int, pres_hpa_dec);
 80011f8:	1d38      	adds	r0, r7, #4
 80011fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011fc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80011fe:	4909      	ldr	r1, [pc, #36]	@ (8001224 <main+0xb4>)
 8001200:	f000 f912 	bl	8001428 <siprintf>
        print_uart(buffer);
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f8aa 	bl	8001360 <print_uart>

        // Atraso entre as leituras
        Delay_ms(2000);
 800120c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001210:	f7ff ff90 	bl	8001134 <Delay_ms>
    while (1) {
 8001214:	bf00      	nop
 8001216:	e7bb      	b.n	8001190 <main+0x20>
 8001218:	08001ed4 	.word	0x08001ed4
 800121c:	51eb851f 	.word	0x51eb851f
 8001220:	08001ef4 	.word	0x08001ef4
 8001224:	08001f14 	.word	0x08001f14

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <NMI_Handler+0x4>

08001230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <MemManage_Handler+0x4>

08001240 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <UsageFault_Handler+0x4>

08001250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f000 f8c4 	bl	8001404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001288:	4a14      	ldr	r2, [pc, #80]	@ (80012dc <_sbrk+0x5c>)
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <_sbrk+0x60>)
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <_sbrk+0x64>)
 800129e:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <_sbrk+0x68>)
 80012a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d207      	bcs.n	80012c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b0:	f000 f8da 	bl	8001468 <__errno>
 80012b4:	4603      	mov	r3, r0
 80012b6:	220c      	movs	r2, #12
 80012b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012be:	e009      	b.n	80012d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c6:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a05      	ldr	r2, [pc, #20]	@ (80012e4 <_sbrk+0x64>)
 80012d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d2:	68fb      	ldr	r3, [r7, #12]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20005000 	.word	0x20005000
 80012e0:	00000400 	.word	0x00000400
 80012e4:	2000008c 	.word	0x2000008c
 80012e8:	200001e0 	.word	0x200001e0

080012ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <UART_Init>:
#include <stdio.h>  // Para sprintf

uint8_t *ptr;  // Ponteiro global para a função de transmissão

// Inicializar a UART
void UART_Init(void) {
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
    /* Habilitar o clock para GPIOA */
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80012fc:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <UART_Init+0x5c>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <UART_Init+0x5c>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	6193      	str	r3, [r2, #24]

    /* Configurar PA9 (TX) como saída de alta velocidade (50 MHz) com função alternativa */
    GPIOA->CRH &= 0xFFFFFF0F;
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <UART_Init+0x60>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <UART_Init+0x60>)
 800130e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001312:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= 0x000000B0;
 8001314:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <UART_Init+0x60>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4a0f      	ldr	r2, [pc, #60]	@ (8001358 <UART_Init+0x60>)
 800131a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800131e:	6053      	str	r3, [r2, #4]

    /* Habilitar o clock para USART1 */
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <UART_Init+0x5c>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <UART_Init+0x5c>)
 8001326:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132a:	6193      	str	r3, [r2, #24]

    /* Configurar o baud rate da UART */
    USART1->BRR = ((CPU_CLK + (BaudRate / 2U)) / BaudRate);
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <UART_Init+0x64>)
 800132e:	2245      	movs	r2, #69	@ 0x45
 8001330:	609a      	str	r2, [r3, #8]

    /* Habilitar a transmissão e a UART */
    USART1->CR1 |= USART_CR1_TE;
 8001332:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <UART_Init+0x64>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	4a09      	ldr	r2, [pc, #36]	@ (800135c <UART_Init+0x64>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <UART_Init+0x64>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	4a06      	ldr	r2, [pc, #24]	@ (800135c <UART_Init+0x64>)
 8001344:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001348:	60d3      	str	r3, [r2, #12]
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000
 8001358:	40010800 	.word	0x40010800
 800135c:	40013800 	.word	0x40013800

08001360 <print_uart>:

// Função para enviar uma string simples pela UART
void print_uart(const char *label) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
    uart_write((uint8_t*)label);  // Converte para uint8_t* e envia via UART
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f805 	bl	8001378 <uart_write>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <uart_write>:

// Função para enviar uma string pela UART
void uart_write(uint8_t *ch) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    while (*ch) {
 8001380:	e00d      	b.n	800139e <uart_write+0x26>
        // Aguarde até que o registrador de transmissão esteja vazio
        while (!(USART1->SR & USART_SR_TXE)) {}
 8001382:	bf00      	nop
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <uart_write+0x3c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f9      	beq.n	8001384 <uart_write+0xc>
        // Enviar o byte atual
        USART1->DR = (*ch & 0xFF);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	781a      	ldrb	r2, [r3, #0]
 8001394:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <uart_write+0x3c>)
 8001396:	605a      	str	r2, [r3, #4]
        ch++;  // Avançar para o próximo caractere
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3301      	adds	r3, #1
 800139c:	607b      	str	r3, [r7, #4]
    while (*ch) {
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1ed      	bne.n	8001382 <uart_write+0xa>
    }
}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40013800 	.word	0x40013800

080013b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b8:	f7ff ff98 	bl	80012ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013bc:	480b      	ldr	r0, [pc, #44]	@ (80013ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013be:	490c      	ldr	r1, [pc, #48]	@ (80013f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013c0:	4a0c      	ldr	r2, [pc, #48]	@ (80013f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a09      	ldr	r2, [pc, #36]	@ (80013f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013d4:	4c09      	ldr	r4, [pc, #36]	@ (80013fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e2:	f000 f847 	bl	8001474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013e6:	f7ff fec3 	bl	8001170 <main>
  bx lr
 80013ea:	4770      	bx	lr
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80013f4:	08001f74 	.word	0x08001f74
  ldr r2, =_sbss
 80013f8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80013fc:	200001dc 	.word	0x200001dc

08001400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC1_2_IRQHandler>
	...

08001404 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <HAL_IncTick+0x1c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <HAL_IncTick+0x20>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a03      	ldr	r2, [pc, #12]	@ (8001424 <HAL_IncTick+0x20>)
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000000 	.word	0x20000000
 8001424:	20000090 	.word	0x20000090

08001428 <siprintf>:
 8001428:	b40e      	push	{r1, r2, r3}
 800142a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800142e:	b500      	push	{lr}
 8001430:	b09c      	sub	sp, #112	@ 0x70
 8001432:	ab1d      	add	r3, sp, #116	@ 0x74
 8001434:	9002      	str	r0, [sp, #8]
 8001436:	9006      	str	r0, [sp, #24]
 8001438:	9107      	str	r1, [sp, #28]
 800143a:	9104      	str	r1, [sp, #16]
 800143c:	4808      	ldr	r0, [pc, #32]	@ (8001460 <siprintf+0x38>)
 800143e:	4909      	ldr	r1, [pc, #36]	@ (8001464 <siprintf+0x3c>)
 8001440:	f853 2b04 	ldr.w	r2, [r3], #4
 8001444:	9105      	str	r1, [sp, #20]
 8001446:	6800      	ldr	r0, [r0, #0]
 8001448:	a902      	add	r1, sp, #8
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	f000 f98a 	bl	8001764 <_svfiprintf_r>
 8001450:	2200      	movs	r2, #0
 8001452:	9b02      	ldr	r3, [sp, #8]
 8001454:	701a      	strb	r2, [r3, #0]
 8001456:	b01c      	add	sp, #112	@ 0x70
 8001458:	f85d eb04 	ldr.w	lr, [sp], #4
 800145c:	b003      	add	sp, #12
 800145e:	4770      	bx	lr
 8001460:	20000004 	.word	0x20000004
 8001464:	ffff0208 	.word	0xffff0208

08001468 <__errno>:
 8001468:	4b01      	ldr	r3, [pc, #4]	@ (8001470 <__errno+0x8>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000004 	.word	0x20000004

08001474 <__libc_init_array>:
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	2600      	movs	r6, #0
 8001478:	4d0c      	ldr	r5, [pc, #48]	@ (80014ac <__libc_init_array+0x38>)
 800147a:	4c0d      	ldr	r4, [pc, #52]	@ (80014b0 <__libc_init_array+0x3c>)
 800147c:	1b64      	subs	r4, r4, r5
 800147e:	10a4      	asrs	r4, r4, #2
 8001480:	42a6      	cmp	r6, r4
 8001482:	d109      	bne.n	8001498 <__libc_init_array+0x24>
 8001484:	f000 fc78 	bl	8001d78 <_init>
 8001488:	2600      	movs	r6, #0
 800148a:	4d0a      	ldr	r5, [pc, #40]	@ (80014b4 <__libc_init_array+0x40>)
 800148c:	4c0a      	ldr	r4, [pc, #40]	@ (80014b8 <__libc_init_array+0x44>)
 800148e:	1b64      	subs	r4, r4, r5
 8001490:	10a4      	asrs	r4, r4, #2
 8001492:	42a6      	cmp	r6, r4
 8001494:	d105      	bne.n	80014a2 <__libc_init_array+0x2e>
 8001496:	bd70      	pop	{r4, r5, r6, pc}
 8001498:	f855 3b04 	ldr.w	r3, [r5], #4
 800149c:	4798      	blx	r3
 800149e:	3601      	adds	r6, #1
 80014a0:	e7ee      	b.n	8001480 <__libc_init_array+0xc>
 80014a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80014a6:	4798      	blx	r3
 80014a8:	3601      	adds	r6, #1
 80014aa:	e7f2      	b.n	8001492 <__libc_init_array+0x1e>
 80014ac:	08001f6c 	.word	0x08001f6c
 80014b0:	08001f6c 	.word	0x08001f6c
 80014b4:	08001f6c 	.word	0x08001f6c
 80014b8:	08001f70 	.word	0x08001f70

080014bc <__retarget_lock_acquire_recursive>:
 80014bc:	4770      	bx	lr

080014be <__retarget_lock_release_recursive>:
 80014be:	4770      	bx	lr

080014c0 <_free_r>:
 80014c0:	b538      	push	{r3, r4, r5, lr}
 80014c2:	4605      	mov	r5, r0
 80014c4:	2900      	cmp	r1, #0
 80014c6:	d040      	beq.n	800154a <_free_r+0x8a>
 80014c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014cc:	1f0c      	subs	r4, r1, #4
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	bfb8      	it	lt
 80014d2:	18e4      	addlt	r4, r4, r3
 80014d4:	f000 f8de 	bl	8001694 <__malloc_lock>
 80014d8:	4a1c      	ldr	r2, [pc, #112]	@ (800154c <_free_r+0x8c>)
 80014da:	6813      	ldr	r3, [r2, #0]
 80014dc:	b933      	cbnz	r3, 80014ec <_free_r+0x2c>
 80014de:	6063      	str	r3, [r4, #4]
 80014e0:	6014      	str	r4, [r2, #0]
 80014e2:	4628      	mov	r0, r5
 80014e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014e8:	f000 b8da 	b.w	80016a0 <__malloc_unlock>
 80014ec:	42a3      	cmp	r3, r4
 80014ee:	d908      	bls.n	8001502 <_free_r+0x42>
 80014f0:	6820      	ldr	r0, [r4, #0]
 80014f2:	1821      	adds	r1, r4, r0
 80014f4:	428b      	cmp	r3, r1
 80014f6:	bf01      	itttt	eq
 80014f8:	6819      	ldreq	r1, [r3, #0]
 80014fa:	685b      	ldreq	r3, [r3, #4]
 80014fc:	1809      	addeq	r1, r1, r0
 80014fe:	6021      	streq	r1, [r4, #0]
 8001500:	e7ed      	b.n	80014de <_free_r+0x1e>
 8001502:	461a      	mov	r2, r3
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	b10b      	cbz	r3, 800150c <_free_r+0x4c>
 8001508:	42a3      	cmp	r3, r4
 800150a:	d9fa      	bls.n	8001502 <_free_r+0x42>
 800150c:	6811      	ldr	r1, [r2, #0]
 800150e:	1850      	adds	r0, r2, r1
 8001510:	42a0      	cmp	r0, r4
 8001512:	d10b      	bne.n	800152c <_free_r+0x6c>
 8001514:	6820      	ldr	r0, [r4, #0]
 8001516:	4401      	add	r1, r0
 8001518:	1850      	adds	r0, r2, r1
 800151a:	4283      	cmp	r3, r0
 800151c:	6011      	str	r1, [r2, #0]
 800151e:	d1e0      	bne.n	80014e2 <_free_r+0x22>
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4408      	add	r0, r1
 8001526:	6010      	str	r0, [r2, #0]
 8001528:	6053      	str	r3, [r2, #4]
 800152a:	e7da      	b.n	80014e2 <_free_r+0x22>
 800152c:	d902      	bls.n	8001534 <_free_r+0x74>
 800152e:	230c      	movs	r3, #12
 8001530:	602b      	str	r3, [r5, #0]
 8001532:	e7d6      	b.n	80014e2 <_free_r+0x22>
 8001534:	6820      	ldr	r0, [r4, #0]
 8001536:	1821      	adds	r1, r4, r0
 8001538:	428b      	cmp	r3, r1
 800153a:	bf01      	itttt	eq
 800153c:	6819      	ldreq	r1, [r3, #0]
 800153e:	685b      	ldreq	r3, [r3, #4]
 8001540:	1809      	addeq	r1, r1, r0
 8001542:	6021      	streq	r1, [r4, #0]
 8001544:	6063      	str	r3, [r4, #4]
 8001546:	6054      	str	r4, [r2, #4]
 8001548:	e7cb      	b.n	80014e2 <_free_r+0x22>
 800154a:	bd38      	pop	{r3, r4, r5, pc}
 800154c:	200001d8 	.word	0x200001d8

08001550 <sbrk_aligned>:
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	4e0f      	ldr	r6, [pc, #60]	@ (8001590 <sbrk_aligned+0x40>)
 8001554:	460c      	mov	r4, r1
 8001556:	6831      	ldr	r1, [r6, #0]
 8001558:	4605      	mov	r5, r0
 800155a:	b911      	cbnz	r1, 8001562 <sbrk_aligned+0x12>
 800155c:	f000 fbaa 	bl	8001cb4 <_sbrk_r>
 8001560:	6030      	str	r0, [r6, #0]
 8001562:	4621      	mov	r1, r4
 8001564:	4628      	mov	r0, r5
 8001566:	f000 fba5 	bl	8001cb4 <_sbrk_r>
 800156a:	1c43      	adds	r3, r0, #1
 800156c:	d103      	bne.n	8001576 <sbrk_aligned+0x26>
 800156e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001572:	4620      	mov	r0, r4
 8001574:	bd70      	pop	{r4, r5, r6, pc}
 8001576:	1cc4      	adds	r4, r0, #3
 8001578:	f024 0403 	bic.w	r4, r4, #3
 800157c:	42a0      	cmp	r0, r4
 800157e:	d0f8      	beq.n	8001572 <sbrk_aligned+0x22>
 8001580:	1a21      	subs	r1, r4, r0
 8001582:	4628      	mov	r0, r5
 8001584:	f000 fb96 	bl	8001cb4 <_sbrk_r>
 8001588:	3001      	adds	r0, #1
 800158a:	d1f2      	bne.n	8001572 <sbrk_aligned+0x22>
 800158c:	e7ef      	b.n	800156e <sbrk_aligned+0x1e>
 800158e:	bf00      	nop
 8001590:	200001d4 	.word	0x200001d4

08001594 <_malloc_r>:
 8001594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001598:	1ccd      	adds	r5, r1, #3
 800159a:	f025 0503 	bic.w	r5, r5, #3
 800159e:	3508      	adds	r5, #8
 80015a0:	2d0c      	cmp	r5, #12
 80015a2:	bf38      	it	cc
 80015a4:	250c      	movcc	r5, #12
 80015a6:	2d00      	cmp	r5, #0
 80015a8:	4606      	mov	r6, r0
 80015aa:	db01      	blt.n	80015b0 <_malloc_r+0x1c>
 80015ac:	42a9      	cmp	r1, r5
 80015ae:	d904      	bls.n	80015ba <_malloc_r+0x26>
 80015b0:	230c      	movs	r3, #12
 80015b2:	6033      	str	r3, [r6, #0]
 80015b4:	2000      	movs	r0, #0
 80015b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001690 <_malloc_r+0xfc>
 80015be:	f000 f869 	bl	8001694 <__malloc_lock>
 80015c2:	f8d8 3000 	ldr.w	r3, [r8]
 80015c6:	461c      	mov	r4, r3
 80015c8:	bb44      	cbnz	r4, 800161c <_malloc_r+0x88>
 80015ca:	4629      	mov	r1, r5
 80015cc:	4630      	mov	r0, r6
 80015ce:	f7ff ffbf 	bl	8001550 <sbrk_aligned>
 80015d2:	1c43      	adds	r3, r0, #1
 80015d4:	4604      	mov	r4, r0
 80015d6:	d158      	bne.n	800168a <_malloc_r+0xf6>
 80015d8:	f8d8 4000 	ldr.w	r4, [r8]
 80015dc:	4627      	mov	r7, r4
 80015de:	2f00      	cmp	r7, #0
 80015e0:	d143      	bne.n	800166a <_malloc_r+0xd6>
 80015e2:	2c00      	cmp	r4, #0
 80015e4:	d04b      	beq.n	800167e <_malloc_r+0xea>
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	4639      	mov	r1, r7
 80015ea:	4630      	mov	r0, r6
 80015ec:	eb04 0903 	add.w	r9, r4, r3
 80015f0:	f000 fb60 	bl	8001cb4 <_sbrk_r>
 80015f4:	4581      	cmp	r9, r0
 80015f6:	d142      	bne.n	800167e <_malloc_r+0xea>
 80015f8:	6821      	ldr	r1, [r4, #0]
 80015fa:	4630      	mov	r0, r6
 80015fc:	1a6d      	subs	r5, r5, r1
 80015fe:	4629      	mov	r1, r5
 8001600:	f7ff ffa6 	bl	8001550 <sbrk_aligned>
 8001604:	3001      	adds	r0, #1
 8001606:	d03a      	beq.n	800167e <_malloc_r+0xea>
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	442b      	add	r3, r5
 800160c:	6023      	str	r3, [r4, #0]
 800160e:	f8d8 3000 	ldr.w	r3, [r8]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	bb62      	cbnz	r2, 8001670 <_malloc_r+0xdc>
 8001616:	f8c8 7000 	str.w	r7, [r8]
 800161a:	e00f      	b.n	800163c <_malloc_r+0xa8>
 800161c:	6822      	ldr	r2, [r4, #0]
 800161e:	1b52      	subs	r2, r2, r5
 8001620:	d420      	bmi.n	8001664 <_malloc_r+0xd0>
 8001622:	2a0b      	cmp	r2, #11
 8001624:	d917      	bls.n	8001656 <_malloc_r+0xc2>
 8001626:	1961      	adds	r1, r4, r5
 8001628:	42a3      	cmp	r3, r4
 800162a:	6025      	str	r5, [r4, #0]
 800162c:	bf18      	it	ne
 800162e:	6059      	strne	r1, [r3, #4]
 8001630:	6863      	ldr	r3, [r4, #4]
 8001632:	bf08      	it	eq
 8001634:	f8c8 1000 	streq.w	r1, [r8]
 8001638:	5162      	str	r2, [r4, r5]
 800163a:	604b      	str	r3, [r1, #4]
 800163c:	4630      	mov	r0, r6
 800163e:	f000 f82f 	bl	80016a0 <__malloc_unlock>
 8001642:	f104 000b 	add.w	r0, r4, #11
 8001646:	1d23      	adds	r3, r4, #4
 8001648:	f020 0007 	bic.w	r0, r0, #7
 800164c:	1ac2      	subs	r2, r0, r3
 800164e:	bf1c      	itt	ne
 8001650:	1a1b      	subne	r3, r3, r0
 8001652:	50a3      	strne	r3, [r4, r2]
 8001654:	e7af      	b.n	80015b6 <_malloc_r+0x22>
 8001656:	6862      	ldr	r2, [r4, #4]
 8001658:	42a3      	cmp	r3, r4
 800165a:	bf0c      	ite	eq
 800165c:	f8c8 2000 	streq.w	r2, [r8]
 8001660:	605a      	strne	r2, [r3, #4]
 8001662:	e7eb      	b.n	800163c <_malloc_r+0xa8>
 8001664:	4623      	mov	r3, r4
 8001666:	6864      	ldr	r4, [r4, #4]
 8001668:	e7ae      	b.n	80015c8 <_malloc_r+0x34>
 800166a:	463c      	mov	r4, r7
 800166c:	687f      	ldr	r7, [r7, #4]
 800166e:	e7b6      	b.n	80015de <_malloc_r+0x4a>
 8001670:	461a      	mov	r2, r3
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	42a3      	cmp	r3, r4
 8001676:	d1fb      	bne.n	8001670 <_malloc_r+0xdc>
 8001678:	2300      	movs	r3, #0
 800167a:	6053      	str	r3, [r2, #4]
 800167c:	e7de      	b.n	800163c <_malloc_r+0xa8>
 800167e:	230c      	movs	r3, #12
 8001680:	4630      	mov	r0, r6
 8001682:	6033      	str	r3, [r6, #0]
 8001684:	f000 f80c 	bl	80016a0 <__malloc_unlock>
 8001688:	e794      	b.n	80015b4 <_malloc_r+0x20>
 800168a:	6005      	str	r5, [r0, #0]
 800168c:	e7d6      	b.n	800163c <_malloc_r+0xa8>
 800168e:	bf00      	nop
 8001690:	200001d8 	.word	0x200001d8

08001694 <__malloc_lock>:
 8001694:	4801      	ldr	r0, [pc, #4]	@ (800169c <__malloc_lock+0x8>)
 8001696:	f7ff bf11 	b.w	80014bc <__retarget_lock_acquire_recursive>
 800169a:	bf00      	nop
 800169c:	200001d0 	.word	0x200001d0

080016a0 <__malloc_unlock>:
 80016a0:	4801      	ldr	r0, [pc, #4]	@ (80016a8 <__malloc_unlock+0x8>)
 80016a2:	f7ff bf0c 	b.w	80014be <__retarget_lock_release_recursive>
 80016a6:	bf00      	nop
 80016a8:	200001d0 	.word	0x200001d0

080016ac <__ssputs_r>:
 80016ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016b0:	461f      	mov	r7, r3
 80016b2:	688e      	ldr	r6, [r1, #8]
 80016b4:	4682      	mov	sl, r0
 80016b6:	42be      	cmp	r6, r7
 80016b8:	460c      	mov	r4, r1
 80016ba:	4690      	mov	r8, r2
 80016bc:	680b      	ldr	r3, [r1, #0]
 80016be:	d82d      	bhi.n	800171c <__ssputs_r+0x70>
 80016c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80016c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80016c8:	d026      	beq.n	8001718 <__ssputs_r+0x6c>
 80016ca:	6965      	ldr	r5, [r4, #20]
 80016cc:	6909      	ldr	r1, [r1, #16]
 80016ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80016d2:	eba3 0901 	sub.w	r9, r3, r1
 80016d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80016da:	1c7b      	adds	r3, r7, #1
 80016dc:	444b      	add	r3, r9
 80016de:	106d      	asrs	r5, r5, #1
 80016e0:	429d      	cmp	r5, r3
 80016e2:	bf38      	it	cc
 80016e4:	461d      	movcc	r5, r3
 80016e6:	0553      	lsls	r3, r2, #21
 80016e8:	d527      	bpl.n	800173a <__ssputs_r+0x8e>
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7ff ff52 	bl	8001594 <_malloc_r>
 80016f0:	4606      	mov	r6, r0
 80016f2:	b360      	cbz	r0, 800174e <__ssputs_r+0xa2>
 80016f4:	464a      	mov	r2, r9
 80016f6:	6921      	ldr	r1, [r4, #16]
 80016f8:	f000 fafa 	bl	8001cf0 <memcpy>
 80016fc:	89a3      	ldrh	r3, [r4, #12]
 80016fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001706:	81a3      	strh	r3, [r4, #12]
 8001708:	6126      	str	r6, [r4, #16]
 800170a:	444e      	add	r6, r9
 800170c:	6026      	str	r6, [r4, #0]
 800170e:	463e      	mov	r6, r7
 8001710:	6165      	str	r5, [r4, #20]
 8001712:	eba5 0509 	sub.w	r5, r5, r9
 8001716:	60a5      	str	r5, [r4, #8]
 8001718:	42be      	cmp	r6, r7
 800171a:	d900      	bls.n	800171e <__ssputs_r+0x72>
 800171c:	463e      	mov	r6, r7
 800171e:	4632      	mov	r2, r6
 8001720:	4641      	mov	r1, r8
 8001722:	6820      	ldr	r0, [r4, #0]
 8001724:	f000 faac 	bl	8001c80 <memmove>
 8001728:	2000      	movs	r0, #0
 800172a:	68a3      	ldr	r3, [r4, #8]
 800172c:	1b9b      	subs	r3, r3, r6
 800172e:	60a3      	str	r3, [r4, #8]
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	4433      	add	r3, r6
 8001734:	6023      	str	r3, [r4, #0]
 8001736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800173a:	462a      	mov	r2, r5
 800173c:	f000 fae6 	bl	8001d0c <_realloc_r>
 8001740:	4606      	mov	r6, r0
 8001742:	2800      	cmp	r0, #0
 8001744:	d1e0      	bne.n	8001708 <__ssputs_r+0x5c>
 8001746:	4650      	mov	r0, sl
 8001748:	6921      	ldr	r1, [r4, #16]
 800174a:	f7ff feb9 	bl	80014c0 <_free_r>
 800174e:	230c      	movs	r3, #12
 8001750:	f8ca 3000 	str.w	r3, [sl]
 8001754:	89a3      	ldrh	r3, [r4, #12]
 8001756:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800175a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800175e:	81a3      	strh	r3, [r4, #12]
 8001760:	e7e9      	b.n	8001736 <__ssputs_r+0x8a>
	...

08001764 <_svfiprintf_r>:
 8001764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001768:	4698      	mov	r8, r3
 800176a:	898b      	ldrh	r3, [r1, #12]
 800176c:	4607      	mov	r7, r0
 800176e:	061b      	lsls	r3, r3, #24
 8001770:	460d      	mov	r5, r1
 8001772:	4614      	mov	r4, r2
 8001774:	b09d      	sub	sp, #116	@ 0x74
 8001776:	d510      	bpl.n	800179a <_svfiprintf_r+0x36>
 8001778:	690b      	ldr	r3, [r1, #16]
 800177a:	b973      	cbnz	r3, 800179a <_svfiprintf_r+0x36>
 800177c:	2140      	movs	r1, #64	@ 0x40
 800177e:	f7ff ff09 	bl	8001594 <_malloc_r>
 8001782:	6028      	str	r0, [r5, #0]
 8001784:	6128      	str	r0, [r5, #16]
 8001786:	b930      	cbnz	r0, 8001796 <_svfiprintf_r+0x32>
 8001788:	230c      	movs	r3, #12
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001790:	b01d      	add	sp, #116	@ 0x74
 8001792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001796:	2340      	movs	r3, #64	@ 0x40
 8001798:	616b      	str	r3, [r5, #20]
 800179a:	2300      	movs	r3, #0
 800179c:	9309      	str	r3, [sp, #36]	@ 0x24
 800179e:	2320      	movs	r3, #32
 80017a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80017a4:	2330      	movs	r3, #48	@ 0x30
 80017a6:	f04f 0901 	mov.w	r9, #1
 80017aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80017ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001948 <_svfiprintf_r+0x1e4>
 80017b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80017b6:	4623      	mov	r3, r4
 80017b8:	469a      	mov	sl, r3
 80017ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017be:	b10a      	cbz	r2, 80017c4 <_svfiprintf_r+0x60>
 80017c0:	2a25      	cmp	r2, #37	@ 0x25
 80017c2:	d1f9      	bne.n	80017b8 <_svfiprintf_r+0x54>
 80017c4:	ebba 0b04 	subs.w	fp, sl, r4
 80017c8:	d00b      	beq.n	80017e2 <_svfiprintf_r+0x7e>
 80017ca:	465b      	mov	r3, fp
 80017cc:	4622      	mov	r2, r4
 80017ce:	4629      	mov	r1, r5
 80017d0:	4638      	mov	r0, r7
 80017d2:	f7ff ff6b 	bl	80016ac <__ssputs_r>
 80017d6:	3001      	adds	r0, #1
 80017d8:	f000 80a7 	beq.w	800192a <_svfiprintf_r+0x1c6>
 80017dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80017de:	445a      	add	r2, fp
 80017e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80017e2:	f89a 3000 	ldrb.w	r3, [sl]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 809f 	beq.w	800192a <_svfiprintf_r+0x1c6>
 80017ec:	2300      	movs	r3, #0
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017f6:	f10a 0a01 	add.w	sl, sl, #1
 80017fa:	9304      	str	r3, [sp, #16]
 80017fc:	9307      	str	r3, [sp, #28]
 80017fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001802:	931a      	str	r3, [sp, #104]	@ 0x68
 8001804:	4654      	mov	r4, sl
 8001806:	2205      	movs	r2, #5
 8001808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800180c:	484e      	ldr	r0, [pc, #312]	@ (8001948 <_svfiprintf_r+0x1e4>)
 800180e:	f000 fa61 	bl	8001cd4 <memchr>
 8001812:	9a04      	ldr	r2, [sp, #16]
 8001814:	b9d8      	cbnz	r0, 800184e <_svfiprintf_r+0xea>
 8001816:	06d0      	lsls	r0, r2, #27
 8001818:	bf44      	itt	mi
 800181a:	2320      	movmi	r3, #32
 800181c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001820:	0711      	lsls	r1, r2, #28
 8001822:	bf44      	itt	mi
 8001824:	232b      	movmi	r3, #43	@ 0x2b
 8001826:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800182a:	f89a 3000 	ldrb.w	r3, [sl]
 800182e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001830:	d015      	beq.n	800185e <_svfiprintf_r+0xfa>
 8001832:	4654      	mov	r4, sl
 8001834:	2000      	movs	r0, #0
 8001836:	f04f 0c0a 	mov.w	ip, #10
 800183a:	9a07      	ldr	r2, [sp, #28]
 800183c:	4621      	mov	r1, r4
 800183e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001842:	3b30      	subs	r3, #48	@ 0x30
 8001844:	2b09      	cmp	r3, #9
 8001846:	d94b      	bls.n	80018e0 <_svfiprintf_r+0x17c>
 8001848:	b1b0      	cbz	r0, 8001878 <_svfiprintf_r+0x114>
 800184a:	9207      	str	r2, [sp, #28]
 800184c:	e014      	b.n	8001878 <_svfiprintf_r+0x114>
 800184e:	eba0 0308 	sub.w	r3, r0, r8
 8001852:	fa09 f303 	lsl.w	r3, r9, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	46a2      	mov	sl, r4
 800185a:	9304      	str	r3, [sp, #16]
 800185c:	e7d2      	b.n	8001804 <_svfiprintf_r+0xa0>
 800185e:	9b03      	ldr	r3, [sp, #12]
 8001860:	1d19      	adds	r1, r3, #4
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	9103      	str	r1, [sp, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	bfbb      	ittet	lt
 800186a:	425b      	neglt	r3, r3
 800186c:	f042 0202 	orrlt.w	r2, r2, #2
 8001870:	9307      	strge	r3, [sp, #28]
 8001872:	9307      	strlt	r3, [sp, #28]
 8001874:	bfb8      	it	lt
 8001876:	9204      	strlt	r2, [sp, #16]
 8001878:	7823      	ldrb	r3, [r4, #0]
 800187a:	2b2e      	cmp	r3, #46	@ 0x2e
 800187c:	d10a      	bne.n	8001894 <_svfiprintf_r+0x130>
 800187e:	7863      	ldrb	r3, [r4, #1]
 8001880:	2b2a      	cmp	r3, #42	@ 0x2a
 8001882:	d132      	bne.n	80018ea <_svfiprintf_r+0x186>
 8001884:	9b03      	ldr	r3, [sp, #12]
 8001886:	3402      	adds	r4, #2
 8001888:	1d1a      	adds	r2, r3, #4
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	9203      	str	r2, [sp, #12]
 800188e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001892:	9305      	str	r3, [sp, #20]
 8001894:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800194c <_svfiprintf_r+0x1e8>
 8001898:	2203      	movs	r2, #3
 800189a:	4650      	mov	r0, sl
 800189c:	7821      	ldrb	r1, [r4, #0]
 800189e:	f000 fa19 	bl	8001cd4 <memchr>
 80018a2:	b138      	cbz	r0, 80018b4 <_svfiprintf_r+0x150>
 80018a4:	2240      	movs	r2, #64	@ 0x40
 80018a6:	9b04      	ldr	r3, [sp, #16]
 80018a8:	eba0 000a 	sub.w	r0, r0, sl
 80018ac:	4082      	lsls	r2, r0
 80018ae:	4313      	orrs	r3, r2
 80018b0:	3401      	adds	r4, #1
 80018b2:	9304      	str	r3, [sp, #16]
 80018b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018b8:	2206      	movs	r2, #6
 80018ba:	4825      	ldr	r0, [pc, #148]	@ (8001950 <_svfiprintf_r+0x1ec>)
 80018bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80018c0:	f000 fa08 	bl	8001cd4 <memchr>
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d036      	beq.n	8001936 <_svfiprintf_r+0x1d2>
 80018c8:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <_svfiprintf_r+0x1f0>)
 80018ca:	bb1b      	cbnz	r3, 8001914 <_svfiprintf_r+0x1b0>
 80018cc:	9b03      	ldr	r3, [sp, #12]
 80018ce:	3307      	adds	r3, #7
 80018d0:	f023 0307 	bic.w	r3, r3, #7
 80018d4:	3308      	adds	r3, #8
 80018d6:	9303      	str	r3, [sp, #12]
 80018d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80018da:	4433      	add	r3, r6
 80018dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80018de:	e76a      	b.n	80017b6 <_svfiprintf_r+0x52>
 80018e0:	460c      	mov	r4, r1
 80018e2:	2001      	movs	r0, #1
 80018e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80018e8:	e7a8      	b.n	800183c <_svfiprintf_r+0xd8>
 80018ea:	2300      	movs	r3, #0
 80018ec:	f04f 0c0a 	mov.w	ip, #10
 80018f0:	4619      	mov	r1, r3
 80018f2:	3401      	adds	r4, #1
 80018f4:	9305      	str	r3, [sp, #20]
 80018f6:	4620      	mov	r0, r4
 80018f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018fc:	3a30      	subs	r2, #48	@ 0x30
 80018fe:	2a09      	cmp	r2, #9
 8001900:	d903      	bls.n	800190a <_svfiprintf_r+0x1a6>
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0c6      	beq.n	8001894 <_svfiprintf_r+0x130>
 8001906:	9105      	str	r1, [sp, #20]
 8001908:	e7c4      	b.n	8001894 <_svfiprintf_r+0x130>
 800190a:	4604      	mov	r4, r0
 800190c:	2301      	movs	r3, #1
 800190e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001912:	e7f0      	b.n	80018f6 <_svfiprintf_r+0x192>
 8001914:	ab03      	add	r3, sp, #12
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	462a      	mov	r2, r5
 800191a:	4638      	mov	r0, r7
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <_svfiprintf_r+0x1f4>)
 800191e:	a904      	add	r1, sp, #16
 8001920:	f3af 8000 	nop.w
 8001924:	1c42      	adds	r2, r0, #1
 8001926:	4606      	mov	r6, r0
 8001928:	d1d6      	bne.n	80018d8 <_svfiprintf_r+0x174>
 800192a:	89ab      	ldrh	r3, [r5, #12]
 800192c:	065b      	lsls	r3, r3, #25
 800192e:	f53f af2d 	bmi.w	800178c <_svfiprintf_r+0x28>
 8001932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001934:	e72c      	b.n	8001790 <_svfiprintf_r+0x2c>
 8001936:	ab03      	add	r3, sp, #12
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	462a      	mov	r2, r5
 800193c:	4638      	mov	r0, r7
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <_svfiprintf_r+0x1f4>)
 8001940:	a904      	add	r1, sp, #16
 8001942:	f000 f87d 	bl	8001a40 <_printf_i>
 8001946:	e7ed      	b.n	8001924 <_svfiprintf_r+0x1c0>
 8001948:	08001f2e 	.word	0x08001f2e
 800194c:	08001f34 	.word	0x08001f34
 8001950:	08001f38 	.word	0x08001f38
 8001954:	00000000 	.word	0x00000000
 8001958:	080016ad 	.word	0x080016ad

0800195c <_printf_common>:
 800195c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001960:	4616      	mov	r6, r2
 8001962:	4698      	mov	r8, r3
 8001964:	688a      	ldr	r2, [r1, #8]
 8001966:	690b      	ldr	r3, [r1, #16]
 8001968:	4607      	mov	r7, r0
 800196a:	4293      	cmp	r3, r2
 800196c:	bfb8      	it	lt
 800196e:	4613      	movlt	r3, r2
 8001970:	6033      	str	r3, [r6, #0]
 8001972:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001976:	460c      	mov	r4, r1
 8001978:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800197c:	b10a      	cbz	r2, 8001982 <_printf_common+0x26>
 800197e:	3301      	adds	r3, #1
 8001980:	6033      	str	r3, [r6, #0]
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	0699      	lsls	r1, r3, #26
 8001986:	bf42      	ittt	mi
 8001988:	6833      	ldrmi	r3, [r6, #0]
 800198a:	3302      	addmi	r3, #2
 800198c:	6033      	strmi	r3, [r6, #0]
 800198e:	6825      	ldr	r5, [r4, #0]
 8001990:	f015 0506 	ands.w	r5, r5, #6
 8001994:	d106      	bne.n	80019a4 <_printf_common+0x48>
 8001996:	f104 0a19 	add.w	sl, r4, #25
 800199a:	68e3      	ldr	r3, [r4, #12]
 800199c:	6832      	ldr	r2, [r6, #0]
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	42ab      	cmp	r3, r5
 80019a2:	dc2b      	bgt.n	80019fc <_printf_common+0xa0>
 80019a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80019a8:	6822      	ldr	r2, [r4, #0]
 80019aa:	3b00      	subs	r3, #0
 80019ac:	bf18      	it	ne
 80019ae:	2301      	movne	r3, #1
 80019b0:	0692      	lsls	r2, r2, #26
 80019b2:	d430      	bmi.n	8001a16 <_printf_common+0xba>
 80019b4:	4641      	mov	r1, r8
 80019b6:	4638      	mov	r0, r7
 80019b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80019bc:	47c8      	blx	r9
 80019be:	3001      	adds	r0, #1
 80019c0:	d023      	beq.n	8001a0a <_printf_common+0xae>
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	6922      	ldr	r2, [r4, #16]
 80019c6:	f003 0306 	and.w	r3, r3, #6
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf14      	ite	ne
 80019ce:	2500      	movne	r5, #0
 80019d0:	6833      	ldreq	r3, [r6, #0]
 80019d2:	f04f 0600 	mov.w	r6, #0
 80019d6:	bf08      	it	eq
 80019d8:	68e5      	ldreq	r5, [r4, #12]
 80019da:	f104 041a 	add.w	r4, r4, #26
 80019de:	bf08      	it	eq
 80019e0:	1aed      	subeq	r5, r5, r3
 80019e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80019e6:	bf08      	it	eq
 80019e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019ec:	4293      	cmp	r3, r2
 80019ee:	bfc4      	itt	gt
 80019f0:	1a9b      	subgt	r3, r3, r2
 80019f2:	18ed      	addgt	r5, r5, r3
 80019f4:	42b5      	cmp	r5, r6
 80019f6:	d11a      	bne.n	8001a2e <_printf_common+0xd2>
 80019f8:	2000      	movs	r0, #0
 80019fa:	e008      	b.n	8001a0e <_printf_common+0xb2>
 80019fc:	2301      	movs	r3, #1
 80019fe:	4652      	mov	r2, sl
 8001a00:	4641      	mov	r1, r8
 8001a02:	4638      	mov	r0, r7
 8001a04:	47c8      	blx	r9
 8001a06:	3001      	adds	r0, #1
 8001a08:	d103      	bne.n	8001a12 <_printf_common+0xb6>
 8001a0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a12:	3501      	adds	r5, #1
 8001a14:	e7c1      	b.n	800199a <_printf_common+0x3e>
 8001a16:	2030      	movs	r0, #48	@ 0x30
 8001a18:	18e1      	adds	r1, r4, r3
 8001a1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001a24:	4422      	add	r2, r4
 8001a26:	3302      	adds	r3, #2
 8001a28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001a2c:	e7c2      	b.n	80019b4 <_printf_common+0x58>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4622      	mov	r2, r4
 8001a32:	4641      	mov	r1, r8
 8001a34:	4638      	mov	r0, r7
 8001a36:	47c8      	blx	r9
 8001a38:	3001      	adds	r0, #1
 8001a3a:	d0e6      	beq.n	8001a0a <_printf_common+0xae>
 8001a3c:	3601      	adds	r6, #1
 8001a3e:	e7d9      	b.n	80019f4 <_printf_common+0x98>

08001a40 <_printf_i>:
 8001a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a44:	7e0f      	ldrb	r7, [r1, #24]
 8001a46:	4691      	mov	r9, r2
 8001a48:	2f78      	cmp	r7, #120	@ 0x78
 8001a4a:	4680      	mov	r8, r0
 8001a4c:	460c      	mov	r4, r1
 8001a4e:	469a      	mov	sl, r3
 8001a50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001a52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001a56:	d807      	bhi.n	8001a68 <_printf_i+0x28>
 8001a58:	2f62      	cmp	r7, #98	@ 0x62
 8001a5a:	d80a      	bhi.n	8001a72 <_printf_i+0x32>
 8001a5c:	2f00      	cmp	r7, #0
 8001a5e:	f000 80d3 	beq.w	8001c08 <_printf_i+0x1c8>
 8001a62:	2f58      	cmp	r7, #88	@ 0x58
 8001a64:	f000 80ba 	beq.w	8001bdc <_printf_i+0x19c>
 8001a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a70:	e03a      	b.n	8001ae8 <_printf_i+0xa8>
 8001a72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a76:	2b15      	cmp	r3, #21
 8001a78:	d8f6      	bhi.n	8001a68 <_printf_i+0x28>
 8001a7a:	a101      	add	r1, pc, #4	@ (adr r1, 8001a80 <_printf_i+0x40>)
 8001a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a80:	08001ad9 	.word	0x08001ad9
 8001a84:	08001aed 	.word	0x08001aed
 8001a88:	08001a69 	.word	0x08001a69
 8001a8c:	08001a69 	.word	0x08001a69
 8001a90:	08001a69 	.word	0x08001a69
 8001a94:	08001a69 	.word	0x08001a69
 8001a98:	08001aed 	.word	0x08001aed
 8001a9c:	08001a69 	.word	0x08001a69
 8001aa0:	08001a69 	.word	0x08001a69
 8001aa4:	08001a69 	.word	0x08001a69
 8001aa8:	08001a69 	.word	0x08001a69
 8001aac:	08001bef 	.word	0x08001bef
 8001ab0:	08001b17 	.word	0x08001b17
 8001ab4:	08001ba9 	.word	0x08001ba9
 8001ab8:	08001a69 	.word	0x08001a69
 8001abc:	08001a69 	.word	0x08001a69
 8001ac0:	08001c11 	.word	0x08001c11
 8001ac4:	08001a69 	.word	0x08001a69
 8001ac8:	08001b17 	.word	0x08001b17
 8001acc:	08001a69 	.word	0x08001a69
 8001ad0:	08001a69 	.word	0x08001a69
 8001ad4:	08001bb1 	.word	0x08001bb1
 8001ad8:	6833      	ldr	r3, [r6, #0]
 8001ada:	1d1a      	adds	r2, r3, #4
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6032      	str	r2, [r6, #0]
 8001ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ae4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e09e      	b.n	8001c2a <_printf_i+0x1ea>
 8001aec:	6833      	ldr	r3, [r6, #0]
 8001aee:	6820      	ldr	r0, [r4, #0]
 8001af0:	1d19      	adds	r1, r3, #4
 8001af2:	6031      	str	r1, [r6, #0]
 8001af4:	0606      	lsls	r6, r0, #24
 8001af6:	d501      	bpl.n	8001afc <_printf_i+0xbc>
 8001af8:	681d      	ldr	r5, [r3, #0]
 8001afa:	e003      	b.n	8001b04 <_printf_i+0xc4>
 8001afc:	0645      	lsls	r5, r0, #25
 8001afe:	d5fb      	bpl.n	8001af8 <_printf_i+0xb8>
 8001b00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001b04:	2d00      	cmp	r5, #0
 8001b06:	da03      	bge.n	8001b10 <_printf_i+0xd0>
 8001b08:	232d      	movs	r3, #45	@ 0x2d
 8001b0a:	426d      	negs	r5, r5
 8001b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b10:	230a      	movs	r3, #10
 8001b12:	4859      	ldr	r0, [pc, #356]	@ (8001c78 <_printf_i+0x238>)
 8001b14:	e011      	b.n	8001b3a <_printf_i+0xfa>
 8001b16:	6821      	ldr	r1, [r4, #0]
 8001b18:	6833      	ldr	r3, [r6, #0]
 8001b1a:	0608      	lsls	r0, r1, #24
 8001b1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001b20:	d402      	bmi.n	8001b28 <_printf_i+0xe8>
 8001b22:	0649      	lsls	r1, r1, #25
 8001b24:	bf48      	it	mi
 8001b26:	b2ad      	uxthmi	r5, r5
 8001b28:	2f6f      	cmp	r7, #111	@ 0x6f
 8001b2a:	6033      	str	r3, [r6, #0]
 8001b2c:	bf14      	ite	ne
 8001b2e:	230a      	movne	r3, #10
 8001b30:	2308      	moveq	r3, #8
 8001b32:	4851      	ldr	r0, [pc, #324]	@ (8001c78 <_printf_i+0x238>)
 8001b34:	2100      	movs	r1, #0
 8001b36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001b3a:	6866      	ldr	r6, [r4, #4]
 8001b3c:	2e00      	cmp	r6, #0
 8001b3e:	bfa8      	it	ge
 8001b40:	6821      	ldrge	r1, [r4, #0]
 8001b42:	60a6      	str	r6, [r4, #8]
 8001b44:	bfa4      	itt	ge
 8001b46:	f021 0104 	bicge.w	r1, r1, #4
 8001b4a:	6021      	strge	r1, [r4, #0]
 8001b4c:	b90d      	cbnz	r5, 8001b52 <_printf_i+0x112>
 8001b4e:	2e00      	cmp	r6, #0
 8001b50:	d04b      	beq.n	8001bea <_printf_i+0x1aa>
 8001b52:	4616      	mov	r6, r2
 8001b54:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b58:	fb03 5711 	mls	r7, r3, r1, r5
 8001b5c:	5dc7      	ldrb	r7, [r0, r7]
 8001b5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b62:	462f      	mov	r7, r5
 8001b64:	42bb      	cmp	r3, r7
 8001b66:	460d      	mov	r5, r1
 8001b68:	d9f4      	bls.n	8001b54 <_printf_i+0x114>
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d10b      	bne.n	8001b86 <_printf_i+0x146>
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	07df      	lsls	r7, r3, #31
 8001b72:	d508      	bpl.n	8001b86 <_printf_i+0x146>
 8001b74:	6923      	ldr	r3, [r4, #16]
 8001b76:	6861      	ldr	r1, [r4, #4]
 8001b78:	4299      	cmp	r1, r3
 8001b7a:	bfde      	ittt	le
 8001b7c:	2330      	movle	r3, #48	@ 0x30
 8001b7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b82:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001b86:	1b92      	subs	r2, r2, r6
 8001b88:	6122      	str	r2, [r4, #16]
 8001b8a:	464b      	mov	r3, r9
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	4640      	mov	r0, r8
 8001b90:	f8cd a000 	str.w	sl, [sp]
 8001b94:	aa03      	add	r2, sp, #12
 8001b96:	f7ff fee1 	bl	800195c <_printf_common>
 8001b9a:	3001      	adds	r0, #1
 8001b9c:	d14a      	bne.n	8001c34 <_printf_i+0x1f4>
 8001b9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ba2:	b004      	add	sp, #16
 8001ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	f043 0320 	orr.w	r3, r3, #32
 8001bae:	6023      	str	r3, [r4, #0]
 8001bb0:	2778      	movs	r7, #120	@ 0x78
 8001bb2:	4832      	ldr	r0, [pc, #200]	@ (8001c7c <_printf_i+0x23c>)
 8001bb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	6831      	ldr	r1, [r6, #0]
 8001bbc:	061f      	lsls	r7, r3, #24
 8001bbe:	f851 5b04 	ldr.w	r5, [r1], #4
 8001bc2:	d402      	bmi.n	8001bca <_printf_i+0x18a>
 8001bc4:	065f      	lsls	r7, r3, #25
 8001bc6:	bf48      	it	mi
 8001bc8:	b2ad      	uxthmi	r5, r5
 8001bca:	6031      	str	r1, [r6, #0]
 8001bcc:	07d9      	lsls	r1, r3, #31
 8001bce:	bf44      	itt	mi
 8001bd0:	f043 0320 	orrmi.w	r3, r3, #32
 8001bd4:	6023      	strmi	r3, [r4, #0]
 8001bd6:	b11d      	cbz	r5, 8001be0 <_printf_i+0x1a0>
 8001bd8:	2310      	movs	r3, #16
 8001bda:	e7ab      	b.n	8001b34 <_printf_i+0xf4>
 8001bdc:	4826      	ldr	r0, [pc, #152]	@ (8001c78 <_printf_i+0x238>)
 8001bde:	e7e9      	b.n	8001bb4 <_printf_i+0x174>
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	f023 0320 	bic.w	r3, r3, #32
 8001be6:	6023      	str	r3, [r4, #0]
 8001be8:	e7f6      	b.n	8001bd8 <_printf_i+0x198>
 8001bea:	4616      	mov	r6, r2
 8001bec:	e7bd      	b.n	8001b6a <_printf_i+0x12a>
 8001bee:	6833      	ldr	r3, [r6, #0]
 8001bf0:	6825      	ldr	r5, [r4, #0]
 8001bf2:	1d18      	adds	r0, r3, #4
 8001bf4:	6961      	ldr	r1, [r4, #20]
 8001bf6:	6030      	str	r0, [r6, #0]
 8001bf8:	062e      	lsls	r6, r5, #24
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	d501      	bpl.n	8001c02 <_printf_i+0x1c2>
 8001bfe:	6019      	str	r1, [r3, #0]
 8001c00:	e002      	b.n	8001c08 <_printf_i+0x1c8>
 8001c02:	0668      	lsls	r0, r5, #25
 8001c04:	d5fb      	bpl.n	8001bfe <_printf_i+0x1be>
 8001c06:	8019      	strh	r1, [r3, #0]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	4616      	mov	r6, r2
 8001c0c:	6123      	str	r3, [r4, #16]
 8001c0e:	e7bc      	b.n	8001b8a <_printf_i+0x14a>
 8001c10:	6833      	ldr	r3, [r6, #0]
 8001c12:	2100      	movs	r1, #0
 8001c14:	1d1a      	adds	r2, r3, #4
 8001c16:	6032      	str	r2, [r6, #0]
 8001c18:	681e      	ldr	r6, [r3, #0]
 8001c1a:	6862      	ldr	r2, [r4, #4]
 8001c1c:	4630      	mov	r0, r6
 8001c1e:	f000 f859 	bl	8001cd4 <memchr>
 8001c22:	b108      	cbz	r0, 8001c28 <_printf_i+0x1e8>
 8001c24:	1b80      	subs	r0, r0, r6
 8001c26:	6060      	str	r0, [r4, #4]
 8001c28:	6863      	ldr	r3, [r4, #4]
 8001c2a:	6123      	str	r3, [r4, #16]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c32:	e7aa      	b.n	8001b8a <_printf_i+0x14a>
 8001c34:	4632      	mov	r2, r6
 8001c36:	4649      	mov	r1, r9
 8001c38:	4640      	mov	r0, r8
 8001c3a:	6923      	ldr	r3, [r4, #16]
 8001c3c:	47d0      	blx	sl
 8001c3e:	3001      	adds	r0, #1
 8001c40:	d0ad      	beq.n	8001b9e <_printf_i+0x15e>
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	079b      	lsls	r3, r3, #30
 8001c46:	d413      	bmi.n	8001c70 <_printf_i+0x230>
 8001c48:	68e0      	ldr	r0, [r4, #12]
 8001c4a:	9b03      	ldr	r3, [sp, #12]
 8001c4c:	4298      	cmp	r0, r3
 8001c4e:	bfb8      	it	lt
 8001c50:	4618      	movlt	r0, r3
 8001c52:	e7a6      	b.n	8001ba2 <_printf_i+0x162>
 8001c54:	2301      	movs	r3, #1
 8001c56:	4632      	mov	r2, r6
 8001c58:	4649      	mov	r1, r9
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	47d0      	blx	sl
 8001c5e:	3001      	adds	r0, #1
 8001c60:	d09d      	beq.n	8001b9e <_printf_i+0x15e>
 8001c62:	3501      	adds	r5, #1
 8001c64:	68e3      	ldr	r3, [r4, #12]
 8001c66:	9903      	ldr	r1, [sp, #12]
 8001c68:	1a5b      	subs	r3, r3, r1
 8001c6a:	42ab      	cmp	r3, r5
 8001c6c:	dcf2      	bgt.n	8001c54 <_printf_i+0x214>
 8001c6e:	e7eb      	b.n	8001c48 <_printf_i+0x208>
 8001c70:	2500      	movs	r5, #0
 8001c72:	f104 0619 	add.w	r6, r4, #25
 8001c76:	e7f5      	b.n	8001c64 <_printf_i+0x224>
 8001c78:	08001f3f 	.word	0x08001f3f
 8001c7c:	08001f50 	.word	0x08001f50

08001c80 <memmove>:
 8001c80:	4288      	cmp	r0, r1
 8001c82:	b510      	push	{r4, lr}
 8001c84:	eb01 0402 	add.w	r4, r1, r2
 8001c88:	d902      	bls.n	8001c90 <memmove+0x10>
 8001c8a:	4284      	cmp	r4, r0
 8001c8c:	4623      	mov	r3, r4
 8001c8e:	d807      	bhi.n	8001ca0 <memmove+0x20>
 8001c90:	1e43      	subs	r3, r0, #1
 8001c92:	42a1      	cmp	r1, r4
 8001c94:	d008      	beq.n	8001ca8 <memmove+0x28>
 8001c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c9e:	e7f8      	b.n	8001c92 <memmove+0x12>
 8001ca0:	4601      	mov	r1, r0
 8001ca2:	4402      	add	r2, r0
 8001ca4:	428a      	cmp	r2, r1
 8001ca6:	d100      	bne.n	8001caa <memmove+0x2a>
 8001ca8:	bd10      	pop	{r4, pc}
 8001caa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001cb2:	e7f7      	b.n	8001ca4 <memmove+0x24>

08001cb4 <_sbrk_r>:
 8001cb4:	b538      	push	{r3, r4, r5, lr}
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	4d05      	ldr	r5, [pc, #20]	@ (8001cd0 <_sbrk_r+0x1c>)
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	602b      	str	r3, [r5, #0]
 8001cc0:	f7ff fade 	bl	8001280 <_sbrk>
 8001cc4:	1c43      	adds	r3, r0, #1
 8001cc6:	d102      	bne.n	8001cce <_sbrk_r+0x1a>
 8001cc8:	682b      	ldr	r3, [r5, #0]
 8001cca:	b103      	cbz	r3, 8001cce <_sbrk_r+0x1a>
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
 8001cd0:	200001cc 	.word	0x200001cc

08001cd4 <memchr>:
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	b510      	push	{r4, lr}
 8001cd8:	b2c9      	uxtb	r1, r1
 8001cda:	4402      	add	r2, r0
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	d101      	bne.n	8001ce6 <memchr+0x12>
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	e003      	b.n	8001cee <memchr+0x1a>
 8001ce6:	7804      	ldrb	r4, [r0, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	428c      	cmp	r4, r1
 8001cec:	d1f6      	bne.n	8001cdc <memchr+0x8>
 8001cee:	bd10      	pop	{r4, pc}

08001cf0 <memcpy>:
 8001cf0:	440a      	add	r2, r1
 8001cf2:	4291      	cmp	r1, r2
 8001cf4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001cf8:	d100      	bne.n	8001cfc <memcpy+0xc>
 8001cfa:	4770      	bx	lr
 8001cfc:	b510      	push	{r4, lr}
 8001cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d02:	4291      	cmp	r1, r2
 8001d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d08:	d1f9      	bne.n	8001cfe <memcpy+0xe>
 8001d0a:	bd10      	pop	{r4, pc}

08001d0c <_realloc_r>:
 8001d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d10:	4680      	mov	r8, r0
 8001d12:	4615      	mov	r5, r2
 8001d14:	460c      	mov	r4, r1
 8001d16:	b921      	cbnz	r1, 8001d22 <_realloc_r+0x16>
 8001d18:	4611      	mov	r1, r2
 8001d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d1e:	f7ff bc39 	b.w	8001594 <_malloc_r>
 8001d22:	b92a      	cbnz	r2, 8001d30 <_realloc_r+0x24>
 8001d24:	f7ff fbcc 	bl	80014c0 <_free_r>
 8001d28:	2400      	movs	r4, #0
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d30:	f000 f81a 	bl	8001d68 <_malloc_usable_size_r>
 8001d34:	4285      	cmp	r5, r0
 8001d36:	4606      	mov	r6, r0
 8001d38:	d802      	bhi.n	8001d40 <_realloc_r+0x34>
 8001d3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001d3e:	d8f4      	bhi.n	8001d2a <_realloc_r+0x1e>
 8001d40:	4629      	mov	r1, r5
 8001d42:	4640      	mov	r0, r8
 8001d44:	f7ff fc26 	bl	8001594 <_malloc_r>
 8001d48:	4607      	mov	r7, r0
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	d0ec      	beq.n	8001d28 <_realloc_r+0x1c>
 8001d4e:	42b5      	cmp	r5, r6
 8001d50:	462a      	mov	r2, r5
 8001d52:	4621      	mov	r1, r4
 8001d54:	bf28      	it	cs
 8001d56:	4632      	movcs	r2, r6
 8001d58:	f7ff ffca 	bl	8001cf0 <memcpy>
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	4640      	mov	r0, r8
 8001d60:	f7ff fbae 	bl	80014c0 <_free_r>
 8001d64:	463c      	mov	r4, r7
 8001d66:	e7e0      	b.n	8001d2a <_realloc_r+0x1e>

08001d68 <_malloc_usable_size_r>:
 8001d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d6c:	1f18      	subs	r0, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bfbc      	itt	lt
 8001d72:	580b      	ldrlt	r3, [r1, r0]
 8001d74:	18c0      	addlt	r0, r0, r3
 8001d76:	4770      	bx	lr

08001d78 <_init>:
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7a:	bf00      	nop
 8001d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d7e:	bc08      	pop	{r3}
 8001d80:	469e      	mov	lr, r3
 8001d82:	4770      	bx	lr

08001d84 <_fini>:
 8001d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d86:	bf00      	nop
 8001d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d8a:	bc08      	pop	{r3}
 8001d8c:	469e      	mov	lr, r3
 8001d8e:	4770      	bx	lr
